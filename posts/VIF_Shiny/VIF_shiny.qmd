---
title: "Added Variable Plots and VIF"
author: "Haley Grant"
filters: 
  - shinylive
---

```{shinylive-r}
#| standalone: true
#| viewerHeight: 600


library(shiny)
library(tidyverse)
library(GGally)

# Define UI for application that draws a histogram
ui <- fluidPage(
  
  # Application title
  titlePanel("Added-Variable Plots and VIF"),
  
  
  # Show a plot of the generated distribution
  tabsetPanel(type = "tabs",
              tabPanel("Changing the range of x",
                       sidebarLayout( 
                         sidebarPanel(
                           sliderInput("c", "Scaling Constant", 
                                       min = 0.1, max = 3,value = 1)),
                         mainPanel( 
                           plotOutput("xplot",height = "300px"),
                           textOutput("se"),
                           p(),
                           strong("What's the point?"),
                           p("The goal of this part of the app is to show you how changing the amount of variability in x impacts the standard error of our coefficient estimate for \u03B2. As we decrease the variability in X, we increase our uncertainty (the standard error) in our estimate of \u03B2. Likewise, the standard error decreases if we increase the variability in X."
                           )
                         ))),
              tabPanel("MLR and VIF",
                       sidebarLayout( 
                         sidebarPanel(
                           radioButtons("cor1", "Correlation betweel x1 and x2",
                                        choices = c("-1","-0.75","0","0.75","1"),
                                        selected = "0.75")
                         ),
                         mainPanel(
                           h3("Simulating the data"),
                           p("Here we've simulated some data with one outcome (y) and two predictors (x1 and x2). 
                             You can control the amount of correlation between x1 and x2 using the radio buttons on the left panel"),
                           h3("Plotting the data"),
                           p("Here we can see the pairwise correlations and scatterplots between each set of variables in the data."),
                           fluidRow(
                             column(12,  plotOutput("corplot",height = "300px"))),
                          p("Another way to visualize the data is to plot y by x1 and show x2 using color. Here we can see that as x1 changes, so does y. 
                            Depending on the correlation we chose, we may also see a pattern between x1 and the color of the points (indicating the value fo x2)."),
                           fluidRow(
                             column(12, plotOutput("dataPlot1", height = "300px"))
                           ),
                          p("Let's imagine splitting the data based on the value (here I rounded to the nearest whole number for plotting purposes) of x2. 
                            Here we are looking at the relationship between x1 and y for each unique value of x2 (holding x2 constant). We can think 
                            of the slope for x1 in the MLR y ~ x1 + x2 as a sort of average of the slopes in these various plots at each value of x2."),
                          
                           fluidRow(
                             column(12, plotOutput("dataPlot2", height = "300px"))
                           ),
                          p("Notice how if we picked a non-zero correlation between x1 and x2, the range of values of x1 for any value we fix for x2 is 
                            smaller than the overall range of x1 that we originally saw."),
                          
                           p(),
                          h3("Added Variable Plots"),
                          p("Imagine now that we combine all of these plots together, but first we center them both in terms of x1 and y. "),
                          fluidRow(
                             column(12, plotOutput("dataPlot3", height = "300px"))
                           ),
                          p("This is essentially what an added variable plot is. If we overlay all of the centered scatter plots above, we can see that there doesn't appear to be any relationship between x2 and x1 or x2 and y (the colors are scattered without a clear pattern). This is what we mean by \"removing the effects of x2.\" What we are visualizing now is the relationship between x1 and y, adjusted for x2 (the relationship between x1 and y that is completely independent of x2)."),
                          fluidRow(
                             column(12, plotOutput("AVplot1", height = "300px"))),
                           strong("How does this relate to standard error?"),
                           p("Remember that changing the variability in x impacted the standard error for our \u03B2 estimate. When two covariates, x1 and x2, are correlated, it means that some of the variability in x1 can be accounted for by changing x2 and vice versa. When we fit a multiple linear regression model we are looking at the association between each variable and the outcome, holding the other variable(s) constant. "),
                           p("If x1 and x2 are correlated, we effectively limit the range of values for x1 when holding x2 constant and vice verse. If x1 and x2 are perfectly correlated, we cannot fix one variable while moving the other (changing one means the other must change as well)."),
                           p(),
                           
                           h3("VIF"),
                           textOutput("vif")
                           
                           
                         ) )
              )
              
  ) 
  
)



# Define server logic required to draw a histogram
server <- function(input, output) {
  
  set.seed(23)
  N = 100
  x1 = runif(n = N, max = 10)
  y = 4.2 + 1.5*x1 + rnorm(n = N, sd = 1.3)
  origx2<-(3 + 0.5*x1 +rnorm(n = N, sd =1.1))
  
  vals<-reactiveValues( x2=origx2,c=1,av.data=NULL,dt=data.frame(x1, x2 = origx2,y),cor = 0.5)
  
  observeEvent({input$c},{ vals$c=input$c})
  
  
  observeEvent({input$cor1},{
    if(input$cor1 == "1"){x2 = (3 + 0.5*x1 ) 
    } else if(input$cor1 == "-1"){x2 = -(3 + 0.5*x1 ) 
    } else if(input$cor1 == "-0.75"){x2 = -origx2
    } else if(input$cor1 == "0.75"){x2 = origx2
    } else{x2 = (3 + rnorm(n = N, sd =1))}
    
    vals$x2=x2
    vals$dt = data.frame(x1, x2 = vals$x2,y)
    vals$cor = as.numeric(input$cor1)
    
    
    xres1 = round(lm(x1 ~ x2, data = vals$dt)$residuals,digits = 6)
    yres1 = round(lm(y ~ x2, data = vals$dt)$residuals , digits = 6)
    xres2 = round(lm(x2 ~ x1, data = vals$dt)$residuals, digits = 6) 
    yres2 = round(lm(y ~ x1, data = vals$dt)$residuals, digits = 6)
    
    vals$av.data = data.frame(x_axis = c(xres1, xres2), 
                              y_axis = c(yres1, yres2),
                              variable = rep(c("Removing x2", "Removing x1"), 
                                             each = 50))
  })
  
  output$xplot <- renderPlot({
    dt = data.frame(x1,y) %>% mutate(x1c = x1*vals$c)
    dt %>% 
      ggplot(aes(x = x1c, y=y)) + 
      geom_point() +
      theme_bw() + 
      labs(x = paste0(vals$c," * x")) + 
      xlim(0, 30) + 
      geom_smooth(method = "lm", formula = y~x, se = F)
  })
  
  output$se <- renderText({
    dt = data.frame(x1,y) %>% mutate(x1c = x1*vals$c)
    se = (summary(lm(y~x1c, data = dt ))$coef[2,2]) %>% 
      round(digits=5)
    print(paste0("Standard error for slope coefficient (\u03B2): ",se))
  })
  
  output$corplot <- renderPlot({
    
    #psych::pairs.panels(vals$dt, ellipses = F, hist.col = "skyblue1")
     ggpairs(vals$dt, 
         upper = list(continuous = wrap("blank")),
        lower = list(continuous = "points"),
       diag = list(continuous = "densityDiag")) + 
      theme_bw()
  })
  
  output$dataPlot1 <- renderPlot({
    
    vals$dt %>% 
      ggplot(aes(x = x1, y=y, color = x2)) + 
      geom_point() +
      theme_bw() + 
      xlim(0, 10) +
      scale_color_viridis_c(option="turbo") + 
      labs(title  = "Data colored by x2 value")
  })
  
  output$dataPlot2 <- renderPlot({
    
    vals$dt %>% 
      mutate(x2_round = round(x2)) %>%
      ggplot(aes(x = x1, y=y, color = x2_round)) + 
      geom_point() +
      theme_bw() + 
      xlim(0, 10) +
      scale_color_viridis_c(option="turbo") + 
      facet_wrap(.~x2_round)+
      labs(title  = "Data split by x2 value") + 
      geom_smooth(method = "lm", se = F, linewidth = 0.5) + 
      labs(color = "x2\n(rounded)")
  })
  
    output$dataPlot3 <- renderPlot({
    
    vals$dt %>% 
      mutate(x2_round = round(x2)) %>%
      ggplot(aes(x = x1, y=y, color = x2_round)) + 
      geom_point() +
      theme_bw() + 
      xlim(0, 10) +
      scale_color_viridis_c(option="turbo") + 
      facet_wrap(.~x2_round)+
      labs(title  = "Data split by x2 value") + 
      geom_smooth(method = "lm", se = F, size = 0.5) + 
      labs(color = "x2\n(rounded)")+  
      geom_vline(data = vals$dt %>% mutate(x2_round = round(x2)) %>% group_by(x2_round) %>% summarize(mean_x = mean(x1)), aes(xintercept = mean_x), linetype = "dashed", color = "black") +
        geom_hline(data = vals$dt %>% mutate(x2_round = round(x2)) %>% group_by(x2_round) %>% summarize(mean_y = mean(y)), aes(yintercept = mean_y), linetype = "dashed", color = "black") + 
        theme(legend.position = "none")
  })
  
  output$AVplot1 <- renderPlot({
    
    vals$av.data %>%
      filter(variable=="Removing x2") %>%
      mutate(x2 = vals$x2)%>%
      ggplot(aes(x = x_axis, y = y_axis)) + 
      theme_bw() + 
      geom_smooth(method = "lm",color = "black", se = F,linewidth = 0.5) + 
      geom_point(aes(color = x2)) + 
      labs(x = "Residuals (x1 | x2)", y = "Residuals (Y | x2)",
           title = "Adjusted Variable Plot",
           subtitle = "Adjusting for x2") +
      scale_color_viridis_c(option="turbo") +
      geom_hline(yintercept = 0, linetype = "dashed", color = "black") + 
      geom_vline(xintercept = 0,linetype = "dashed", color = "black")
    
  })
  

  
  output$vif <- renderText({
    vif = round(1/(1-as.numeric(vals$cor)^2),5)
    print(paste0("Variance Inflation Factor: ",vif))
  })
  
  
  
}

# Run the application 
shinyApp(ui = ui, server = server)
```
