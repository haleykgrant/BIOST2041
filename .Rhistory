yres1 = lm(y ~ x2, data = dt)$residuals
xres2 = lm(x2 ~ x1, data = dt)$residuals
yres2 = lm(y ~ x1, data = dt)$residuals
vals$av.data = data.frame(x_axis = c(xres1, xres2),
y_axis = c(yres1, yres2)
variable = rep(c("Removing X2", "Removing X1"),
xres1 = lm(x1 ~ x2, data = dt)$residuals
yres1 = lm(y ~ x2, data = dt)$residuals
xres2 = lm(x2 ~ x1, data = dt)$residuals
yres2 = lm(y ~ x1, data = dt)$residuals
vals$av.data = data.frame(x_axis = c(xres1, xres2),
y_axis = c(yres1, yres2),
variable = rep(c("Removing X2", "Removing X1"),
each = 50))
vals$c=1
dt = data.frame(x1,y) %>% mutate(x1c = x1*vals$c)
dt %>%
ggplot(aes(x = x1c, y=y)) +
geom_point() +
theme_bw() +
labs(x = paste0(vals$c," * x1")) +
xlim(0, 30)
se = (summary(lm(y~x1c, data = dt %>%
mutate(x1c=x1*c)))$coef[2,2]) %>%
round(digits=5)
print(paste0("Standard Error for b coefficient: ",se))
dt = data.frame(x1,y) %>% mutate(x2 = vals$x2)
dt %>%
ggplot(aes(x = x1, y=y, color = x2)) +
geom_point() +
theme_bw() +
xlim(0, 10)
dt = data.frame(x1,y) %>% mutate(x2 = vals$x2)
p1 = dt %>%
ggplot(aes(x = x1, y=y, color = x2)) +
geom_point() +
theme_bw() +
xlim(0, 10)
p2 = vals$av.data %>%
filter(variable=="Removing X2") %>%
mutate(x2 = x2)%>%
ggplot(aes(x = x_axis, y = y_axis)) +
theme_bw() +
geom_smooth(method = "lm",color = "black") +
geom_point(aes(color = x2)) +
labs(x = "Residuals (X1 | X2)", y = "Residuals (Y | X2)")
gridExtra::grid.arrange(p1,p2)
install.packages("shinylive")
print(paste0("Standard Error for ", expression(beta)," coefficient: ",se))
cor(x1,(3 + 0.5*x1 +rnorm(n=50, sd =1)))
cor(x1,(3 + 0.25*x1 +rnorm(n=50, sd =1)))
log(0.0556249)
log(5.614782)
exists(cdc)
exists("cdc")
?exists
cdc = read_csv("cdc_samp.csv")
url.csv <- "https://haleykgrant.github.io/tutorial_data/data/cdc.samp.csv"
download.file(url.csv, "cdc_samp.csv")
url.xlsx <- "https://haleykgrant.github.io/tutorial_data/data/dds.xlsx"
download.file(url.xlsx, "dds.xlsx")
url.rda <- "https://haleykgrant.github.io/tutorial_data/data/census.rda"
download.file(url.rda, "census.rda")
library(tidyverse)
cdc = read_csv("cdc_samp.csv")
exists("cdc")
exists(cdc)
?View
set.seed(123) # set seed for consistent results
# draw a sample of size 10,000 from Poisson(2.5)
pop <- data.frame(x = rpois(n = 10000 , lambda = 2.5) )
mean(pop$x)
# true variance in population
var(pop$x)
# true standard deviation in population
sd(pop$x)
set.seed(123) # set seed for consistent results
# draw a sample of size 10,000 from Poisson(2.5)
pop <- data.frame(x = rpois(n = 10000 , lambda = 2.5) )
samp <- data.frame(x = sample(pop$x, size = 100, replace = FALSE))
samp %>%
ggplot(aes(x = x)) +
geom_histogram(color = "black", fill = "firebrick1") +
theme_bw()
library(tidyverse)
samp %>%
ggplot(aes(x = x)) +
geom_histogram(color = "black", fill = "firebrick1") +
theme_bw()
samp %>%
ggplot(aes(x = x)) +
geom_histogram(color = "black", fill = "firebrick1", binwidth = 1) +
theme_bw()
pop %>%
ggplot(aes(x = x)) +
geom_histogram(binwidth = 1,
color = "black", fill = "steelblue3") + # black outline with blue fill
theme_bw()
set.seed(1234) # re-setting seed to make sure we get the same numbers
# empty data frame to store means
boot_10000 <- data.frame(mean=rep(NA, 10000))
# bootstrap 10,000 samples each of size 100 (the same as our original sample size)
for(i in 1:10000){
# sample with replacement
samp_10000 <- sample(samp$x, size = 100, replace=TRUE)
# record the mean
boot_10000$mean[i] <- mean(samp_10000)
}
boot1000 %>%
ggplot(aes(x = mean)) +
geom_histogram(color = "black", fill = "lightcoral") +
theme_bw()
boot_1000 %>%
ggplot(aes(x = mean)) +
geom_histogram(color = "black", fill = "lightcoral") +
theme_bw()
set.seed(1234) # re-setting seed to make sure we get the same numbers
# empty data frame to store means
boot_10000 <- data.frame(mean=rep(NA, 10000))
# bootstrap 10,000 samples each of size 100 (the same as our original sample size)
for(i in 1:10000){
# sample with replacement
samp_10000 <- sample(samp$x, size = 100, replace=TRUE)
# record the mean
boot_10000$mean[i] <- mean(samp_10000)
}
boot_1000 %>%
ggplot(aes(x = mean)) +
geom_histogram(color = "black", fill = "lightcoral") +
theme_bw()
boot_10000 %>%
ggplot(aes(x = mean)) +
geom_histogram(color = "black", fill = "lightcoral") +
theme_bw()
mean(boot_10000$mean)
sd(boot_10000$mean)
mean(pop$x)
# standard error
sd(pop$x)/sqrt(nrow(samp))
set.seed(12345) # re-setting seed to make sure we get the same numbers
# empty data frame to store means
boot_10000 <- data.frame(mean=rep(NA, 10000))
# bootstrap 10,000 samples each of size 100 (the same as our original sample size)
for(i in 1:10000){
# sample with replacement from the SAMPLE (not the population)
samp_10000 <- sample(samp$x, size = 100, replace=TRUE)
# record the mean
boot_10000$mean[i] <- mean(samp_10000)
}
boot_10000 %>%
ggplot(aes(x = mean)) +
geom_histogram(color = "black", fill = "lightcoral") +
theme_bw()
mean(boot_10000$mean)
# calculated standard deviation of means (also called standard error)
sd(boot_10000$mean)
## Under the CLT, we would expect these to be
# mean
mean(pop$x)
# standard error
sd(pop$x)/sqrt(nrow(samp))
mean(pop$x)
set.seed(321) # re-setting seed to make sure we get the same numbers
# empty data frame to store means
boot_10000 <- data.frame(mean=rep(NA, 10000))
# bootstrap 10,000 samples each of size 100 (the same as our original sample size)
for(i in 1:10000){
# sample with replacement from the SAMPLE (not the population)
samp_10000 <- sample(samp$x, size = 100, replace=TRUE)
# record the mean
boot_10000$mean[i] <- mean(samp_10000)
}
mean(boot_10000$mean)
# calculated standard deviation of means (also called standard error)
sd(boot_10000$mean)
quantile(boot_10000$mean, c(.025, .975))
sampdist100 %>%
mutate(covers = lower <= pop_mean & upper >= pop_mean) %>%
summarise(percent = mean(covers))
set.seed(1298) # re-setting seed to make sure we get the same numbers
# empty data frame to store mean and bounds of confidence interval
sampdist100 <- data.frame(mean=rep(NA, 10000),
lower = rep(NA, 10000),
upper = rep(NA, 10000))
# resample 10000 times
for(i in 1:10000){
# sample without replacement from the POPULATION
resamp_100 <- sample(pop$x, size = 100, replace=FALSE)
# calculate the mean
sampdist100$mean[i] <- mean(resamp_100)
# lower bound of confidence interval
sampdist100$lower[i] <- mean(resamp_100) - qt(0.975, df = 99)*sd(resamp_100)/sqrt(100)
# upper bound of confidence interval
sampdist100$upper[i] <- mean(resamp_100) + qt(0.975, df = 99)*sd(resamp_100)/sqrt(100)
}
pop_mean = mean(pop$x)
# proportion of intervals that overlap with the true population mean
sampdist100 %>%
mutate(covers = lower <= pop_mean & upper >= pop_mean) %>%
summarise(percent = mean(covers))
mean(samp$x) + qt(c(0.025, 0.975), df = 99)*sd(samp$x)/sqrt(nrow(samp))
mean(pop$x)
data.frame(x = c(sampdist100$mean, boot_10000$mean),
sampling = rep(c("Resample from population", "Bootstrap"), each = 10000)) %>%
mutate(pop_mean = mean(pop$x),
samp_mean = mean(samp$x)) %>%
ggplot(aes(x = x, fill = sampling)) + # color by which method was used
geom_histogram(color = "black", binwidth = 0.1) +
facet_wrap(.~ sampling, nrow = 2) + # separate plots
theme_bw() +
labs(x = "Sample Means", fill = "Method") +
scale_fill_manual(values = c("lightcoral","skyblue")) +
geom_vline(aes(xintercept = samp_mean), linetype = 2, color = "firebrick1") + # add a dashed vertical line at the original sample mean
geom_vline(aes(xintercept = pop_mean), color = "blue")
data.frame(x = c(sampdist100$mean, boot_10000$mean),
sampling = rep(c("Resample from population", "Bootstrap"), each = 10000)) %>%
mutate(pop_mean = mean(pop$x),
samp_mean = mean(samp$x)) %>%
ggplot(aes(x = x, fill = sampling)) + # color by which method was used
geom_histogram(color = "black", binwidth = 0.1) +
facet_wrap(.~ sampling, nrow = 2) + # separate plots
theme_bw() +
labs(x = "Sample Means", fill = "Method") +
scale_fill_manual(values = c("lightcoral","skyblue")) +
geom_vline(aes(xintercept = samp_mean, color = "sample"), linetype = 2, color = "firebrick1") + # add a dashed vertical line at the original sample mean
geom_vline(aes(xintercept = pop_mean), color = "blue")
data.frame(x = c(sampdist100$mean, boot_10000$mean),
sampling = rep(c("Resample from population", "Bootstrap"), each = 10000)) %>%
mutate(pop_mean = mean(pop$x),
samp_mean = mean(samp$x)) %>%
ggplot(aes(x = x, fill = sampling)) + # color by which method was used
geom_histogram(color = "black", binwidth = 0.1) +
facet_wrap(.~ sampling, nrow = 2) + # separate plots
theme_bw() +
labs(x = "Sample Means", fill = "Method") +
scale_fill_manual(values = c("lightcoral","skyblue")) +
geom_vline(aes(xintercept = samp_mean), linetype = 2, color = "firebrick1") + # add a dashed vertical line at the original sample mean
geom_vline(aes(xintercept = pop_mean), color = "blue") +# add a vertical line at the population mean
annotate("text", x = samp_mean, y = Inf, label = "Sample Mean", color = "firebrick1", vjust = 1.5, angle = 90) + # label for sample mean
annotate("text", x = pop_mean, y = Inf, label = "Population Mean", color = "blue", vjust = 1.5, angle = 90) #
data.frame(x = c(sampdist100$mean, boot_10000$mean),
sampling = rep(c("Resample from population", "Bootstrap"), each = 10000)) %>%
mutate(pop_mean = mean(pop$x),
samp_mean = mean(samp$x)) %>%
ggplot(aes(x = x, fill = sampling)) + # color by which method was used
geom_histogram(color = "black", binwidth = 0.1) +
facet_wrap(.~ sampling, nrow = 2) + # separate plots
theme_bw() +
labs(x = "Sample Means", fill = "Method") +
scale_fill_manual(values = c("lightcoral","skyblue")) +
geom_vline(aes(xintercept = samp_mean), linetype = 2, color = "firebrick1") + # add a dashed vertical line at the original sample mean
geom_vline(aes(xintercept = pop_mean), color = "blue") +# add a vertical line at the population mean
annotate("text", aes(x = samp_mean), y = Inf, label = "Sample Mean", color = "firebrick1", vjust = 1.5, angle = 90) + # label for sample mean
annotate("text", aes(x = pop_mean), y = Inf, label = "Population Mean", color = "blue", vjust = 1.5, angle = 90)
data.frame(x = c(sampdist100$mean, boot_10000$mean),
sampling = rep(c("Resample from population", "Bootstrap"), each = 10000)) %>%
mutate(pop_mean = mean(pop$x),
samp_mean = mean(samp$x)) %>%
ggplot(aes(x = x, fill = sampling)) + # color by which method was used
geom_histogram(color = "black", binwidth = 0.1) +
facet_wrap(.~ sampling, nrow = 2) + # separate plots
theme_bw() +
labs(x = "Sample Means", fill = "Method") +
scale_fill_manual(values = c("lightcoral","skyblue")) +
geom_vline(aes(xintercept = samp_mean), linetype = 2, color = "firebrick1") + # add a dashed vertical line at the original sample mean
geom_vline(aes(xintercept = pop_mean), color = "blue") +# add a vertical line at the population mean
annotate("text", x = 2.56, y = Inf, label = "Sample Mean", color = "firebrick1", vjust = 1.5, angle = 90) + # label for sample mean
annotate("text", x = 2.48, y = Inf, label = "Population Mean", color = "blue", vjust = 1.5, angle = 90)
data.frame(x = c(sampdist100$mean, boot_10000$mean),
sampling = rep(c("Resample from population", "Bootstrap"), each = 10000)) %>%
mutate(pop_mean = mean(pop$x),
samp_mean = mean(samp$x)) %>%
ggplot(aes(x = x, fill = sampling)) + # color by which method was used
geom_histogram(color = "black", binwidth = 0.1) +
facet_wrap(.~ sampling, nrow = 2) + # separate plots
theme_bw() +
labs(x = "Sample Means", fill = "Method") +
scale_fill_manual(values = c("lightcoral","skyblue")) +
geom_vline(aes(xintercept = samp_mean, color = "Sample Mean"), linetype = 2, show.legend = TRUE) + # add a dashed vertical line at the original sample mean
geom_vline(aes(xintercept = pop_mean, color = "Population Mean"), show.legend = TRUE) +# add a vertical line at the population mean
scale_color_manual(name = "Mean Type",
values = c("Sample Mean" = "firebrick1", "Population Mean" = "blue"),
labels = c("Sample Mean", "Population Mean")) +
guides(fill = guide_legend(order = 1), color = guide_legend(order = 2))
data.frame(x = c(sampdist100$mean, boot_10000$mean),
sampling = rep(c("Resample from population", "Bootstrap"), each = 10000)) %>%
mutate(pop_mean = mean(pop$x),
samp_mean = mean(samp$x)) %>%
ggplot(aes(x = x, fill = sampling)) + # color by which method was used
geom_histogram(color = "black", binwidth = 0.1) +
facet_wrap(.~ sampling, nrow = 2) + # separate plots
theme_bw() +
labs(x = "Sample Means", fill = "Method") +
scale_fill_manual(values = c("lightcoral","skyblue")) +
geom_vline(aes(xintercept = samp_mean, color = "Sample Mean"), linetype = 2, show.legend = TRUE) + # add a dashed vertical line at the original sample mean
geom_vline(aes(xintercept = pop_mean, color = "Population Mean"), show.legend = TRUE) +# add a vertical line at the population mean
scale_color_manual(name = "Mean Type",
values = c("Sample Mean" = "firebrick1", "Population Mean" = "blue"),
labels = c("Sample Mean", "Population Mean")) +
guides(fill = guide_legend(order = 1), color = guide_legend(order = 2), linetype = guide_legend(order = 2))
data.frame(x = c(sampdist100$mean, boot_10000$mean),
sampling = rep(c("Resample from population", "Bootstrap"), each = 10000)) %>%
mutate(pop_mean = mean(pop$x),
samp_mean = mean(samp$x)) %>%
ggplot(aes(x = x, fill = sampling)) + # color by which method was used
geom_histogram(color = "black", binwidth = 0.1) +
facet_wrap(.~ sampling, nrow = 2) + # separate plots
theme_bw() +
labs(x = "Sample Means", fill = "Method") +
scale_fill_manual(values = c("lightcoral","skyblue")) +
geom_vline(aes(xintercept = samp_mean, color = "Sample Mean", linetype = "Sample Mean" ), show.legend = TRUE) + # add a dashed vertical line at the original sample mean
geom_vline(aes(xintercept = pop_mean, color = "Population Mean", linetype = "Population Mean"), show.legend = TRUE) +# add a vertical line at the population mean
scale_color_manual(name = "Mean Type",
values = c("Sample Mean" = "firebrick1", "Population Mean" = "blue"),
labels = c("Sample Mean", "Population Mean")) +
scale_linetype_manual(name = "Mean Type",
values = c("Sample Mean" = 2, "Population Mean" = 1),
labels = c("Sample Mean", "Population Mean"))
data.frame(x = c(sampdist100$mean, boot_10000$mean),
sampling = rep(c("Resample from population", "Bootstrap"), each = 10000)) %>%
mutate(pop_mean = mean(pop$x),
samp_mean = mean(samp$x)) %>%
ggplot(aes(x = x, fill = sampling)) + # color by which method was used
geom_histogram(color = "black", binwidth = 0.1) +
facet_wrap(.~ sampling, nrow = 2) + # separate plots
theme_bw() +
labs(x = "Sample Means", fill = "Method") +
scale_fill_manual(values = c("lightcoral","skyblue")) +
geom_vline(aes(xintercept = samp_mean, color = "Sample Mean", linetype = "Sample Mean" ), show.legend = TRUE) + # add a dashed vertical line at the original sample mean
geom_vline(aes(xintercept = pop_mean, color = "Population Mean", linetype = "Population Mean"), show.legend = TRUE) +# add a vertical line at the population mean
scale_color_manual(name = "Mean Type",
values = c("Sample Mean" = "firebrick1", "Population Mean" = "blue"),
labels = c("Sample Mean", "Population Mean")) +
scale_linetype_manual(name = "Mean Type",
values = c("Sample Mean" = 2, "Population Mean" = 1),
labels = c("Sample Mean", "Population Mean"))+
guides(fill = guide_legend(order = 1), color = guide_legend(order = 2), linetype = guide_legend(order = 2))
data.frame(x = c(sampdist100$mean, boot_10000$mean),
sampling = rep(c("Resample from population", "Bootstrap"), each = 10000)) %>%
mutate(pop_mean = mean(pop$x),
samp_mean = mean(samp$x)) %>%
ggplot(aes(x = x, fill = sampling)) + # color by which method was used
geom_histogram(color = "black", binwidth = 0.1) +
facet_wrap(.~ sampling, nrow = 2) + # separate plots
theme_bw() +
labs(x = "Sample Means", fill = "Method") +
scale_fill_manual(values = c("lightcoral","skyblue")) +
geom_vline(aes(xintercept = samp_mean, color = "Sample Mean", linetype = "Sample Mean" ), show.legend = TRUE) + # add a dashed vertical line at the original sample mean
geom_vline(aes(xintercept = pop_mean, color = "Population Mean", linetype = "Population Mean"), show.legend = TRUE) +# add a vertical line at the population mean
scale_color_manual(name = "Mean Type",
values = c("Sample Mean" = "firebrick1", "Population Mean" = "blue"),
labels = c("Sample Mean", "Population Mean")) +
scale_linetype_manual(name = "Mean Type",
values = c("Sample Mean" = 2, "Population Mean" = 1),
labels = c("Sample Mean", "Population Mean"))
data.frame(x = c(sampdist100$mean, boot_10000$mean),
sampling = rep(c("Resample from population", "Bootstrap"), each = 10000)) %>%
mutate(pop_mean = mean(pop$x),
samp_mean = mean(samp$x)) %>%
ggplot(aes(x = x, fill = sampling)) + # color by which method was used
geom_histogram(color = "black", binwidth = 0.1) +
facet_wrap(.~ sampling, nrow = 2) + # separate plots
theme_bw() +
labs(x = "Sample Means", fill = "Method") +
scale_fill_manual(values = c("lightcoral","skyblue")) +
geom_vline(aes(xintercept = samp_mean, color = "Sample Mean", linetype = "Sample Mean" ), show.legend = TRUE) + # add a dashed vertical line at the original sample mean
geom_vline(aes(xintercept = pop_mean, color = "Population Mean", linetype = "Population Mean"), show.legend = TRUE) +# add a vertical line at the population mean
scale_color_manual(name = "",
values = c("Sample Mean" = "firebrick1", "Population Mean" = "blue"),
labels = c("Sample Mean", "Population Mean")) +
scale_linetype_manual(name = "",
values = c("Sample Mean" = 2, "Population Mean" = 1),
labels = c("Sample Mean", "Population Mean"))
data.frame(x = c(sampdist100$mean, boot_10000$mean),
sampling = rep(c("Resample from population", "Bootstrap"), each = 10000)) %>%
mutate(pop_mean = mean(pop$x),
samp_mean = mean(samp$x)) %>%
ggplot(aes(x = x, fill = sampling)) + # color by which method was used
geom_histogram(color = "black", binwidth = 0.1) +
facet_wrap(.~ sampling, nrow = 2) + # separate plots
theme_bw() +
labs(x = "Sample Means", fill = "Method") +
scale_fill_manual(values = c("lightcoral","skyblue")) +
geom_vline(aes(xintercept = samp_mean, color = "Sample Mean", linetype = "Sample Mean" ), show.legend = TRUE) + # add a dashed vertical line at the original sample mean
geom_vline(aes(xintercept = pop_mean, color = "Population Mean", linetype = "Population Mean"), show.legend = TRUE) +# add a vertical line at the population mean
scale_color_manual(name = "",
values = c("Sample Mean" = "firebrick1", "Population Mean" = "blue"),
labels = c("Sample Mean", "Population Mean")) +
scale_linetype_manual(name = "",
values = c("Sample Mean" = 2, "Population Mean" = 1),
labels = c("Sample Mean", "Population Mean")) +
guides(fill = guide_legend(order = 1), color = guide_legend(order = 2))
data.frame(x = c(sampdist100$mean, boot_10000$mean),
sampling = rep(c("Resample from population", "Bootstrap"), each = 10000)) %>%
mutate(pop_mean = mean(pop$x),
samp_mean = mean(samp$x)) %>%
ggplot(aes(x = x, fill = sampling)) + # color by which method was used
geom_histogram(color = "black", binwidth = 0.1) +
facet_wrap(.~ sampling, nrow = 2) + # separate plots
theme_bw() +
labs(x = "Sample Means", fill = "Method") +
scale_fill_manual(values = c("lightcoral","skyblue")) +
geom_vline(aes(xintercept = samp_mean, color = "Sample Mean", linetype = "Sample Mean" ), show.legend = TRUE) + # add a dashed vertical line at the original sample mean
geom_vline(aes(xintercept = pop_mean, color = "Population Mean", linetype = "Population Mean"), show.legend = TRUE) +# add a vertical line at the population mean
scale_color_manual(name = "",
values = c("Sample Mean" = "firebrick1", "Population Mean" = "blue"),
labels = c("Sample Mean", "Population Mean")) +
scale_linetype_manual(name = "",
values = c("Sample Mean" = 2, "Population Mean" = 1),
labels = c("Sample Mean", "Population Mean"))
?scale_color_manual
data.frame(x = c(sampdist100$mean, boot_10000$mean),
sampling = rep(c("Resample from population", "Bootstrap"), each = 10000)) %>%
mutate(pop_mean = mean(pop$x),
samp_mean = mean(samp$x)) %>%
ggplot(aes(x = x, fill = sampling)) + # color by which method was used
geom_histogram(color = "black", binwidth = 0.1) +
facet_wrap(.~ sampling, nrow = 2) + # separate plots
theme_bw() +
labs(x = "Sample Means", fill = "Method") +
scale_fill_manual(values = c("lightcoral","skyblue")) +
geom_vline(aes(xintercept = samp_mean, color = "Sample Mean", linetype = "Sample Mean" ), show.legend = TRUE) + # add a dashed vertical line at the original sample mean
geom_vline(aes(xintercept = pop_mean, color = "Population Mean", linetype = "Population Mean"), show.legend = TRUE) +# add a vertical line at the population mean
scale_color_manual(name = "",
values = c("Sample Mean" = "firebrick1", "Population Mean" = "blue")) +
scale_linetype_manual(name = "",
values = c("Sample Mean" = 2, "Population Mean" = 1))
sampdist100 %>%
slice(1:200) %>%
mutate(iteration = row_number()) %>%
mutate(covers = case_when(lower <= pop_mean & upper >= pop_mean ~ "Covers mean",
lower > pop_mean | upper < pop_mean ~ "Does not cover mean"))
sampdist100 %>%
slice(1:200) %>%
mutate(iteration = row_number()) %>%
mutate(covers = case_when(lower <= pop_mean & upper >= pop_mean ~ "Covers mean",
lower > pop_mean | upper < pop_mean ~ "Does not cover mean")) %>%
ggplot(aes(x = mean, y = iteration, color = covers)) +
geom_point(size = 0.5) +
geom_errorbarh(aes(xmin=lower, xmax = upper), linewidth = 0.25) +
theme_bw() +
labs(color = element_blank()) +
geom_vline(xintercept = pop_mean) +
scale_color_manual(values = c("#00BFC4","#F8766D"))
sampdist100 %>%
slice(1:200) %>%
mutate(iteration = row_number()) %>%
mutate(covers = case_when(lower <= pop_mean & upper >= pop_mean ~ "Covers mean",
lower > pop_mean | upper < pop_mean ~ "Does not cover mean")) %>%
ggplot(aes(x = mean, y = iteration, color = covers)) +
geom_point(size = 0.5) +
geom_errorbarh(aes(xmin=lower, xmax = upper), linewidth = 0.25) +
theme_bw() +
labs(color = element_blank()) +
geom_vline(xintercept = pop_mean) +
scale_color_manual(values = c("navy","red"))
set.seed(123) # set seed for consistent results
# draw a sample of size 10,000 from Poisson(2.5)
pop <- data.frame(x = rpois(n = 10000 , lambda = 2.5) )
set.seed(2468) # re-setting seed to make sure we get the same numbers
# draw a sample of size 100 without replacement
samp <- data.frame(x = sample(pop$x, size = 100, replace = FALSE))
set.seed(321) # re-setting seed to make sure we get the same numbers
# empty data frame to store means
boot_10000 <- data.frame(mean=rep(NA, 10000))
# bootstrap 10,000 samples each of size 100 (the same as our original sample size)
for(i in 1:10000){
# sample with replacement from the SAMPLE (not the population)
samp_10000 <- sample(samp$x, size = 100, replace=TRUE)
# record the mean
boot_10000$mean[i] <- mean(samp_10000)
}
set.seed(1298) # re-setting seed to make sure we get the same numbers
# empty data frame to store mean and bounds of confidence interval
sampdist100 <- data.frame(mean=rep(NA, 10000),
lower = rep(NA, 10000),
upper = rep(NA, 10000))
# resample 10000 times
for(i in 1:10000){
# sample without replacement from the POPULATION
resamp_100 <- sample(pop$x, size = 100, replace = FALSE)
# calculate the mean
sampdist100$mean[i] <- mean(resamp_100)
# lower bound of confidence interval
sampdist100$lower[i] <- mean(resamp_100) - qt(0.975, df = 99)*sd(resamp_100)/sqrt(100)
# upper bound of confidence interval
sampdist100$upper[i] <- mean(resamp_100) + qt(0.975, df = 99)*sd(resamp_100)/sqrt(100)
}
quantile(boot_10000$mean, c(.025, .975))
pop_mean = mean(pop$x)
# proportion of intervals that overlap with the true population mean
sampdist100 %>%
mutate(covers = lower <= pop_mean & upper >= pop_mean) %>%
summarise(percent = mean(covers))
sampdist100 %>%
slice(1:200) %>%
mutate(iteration = row_number())
sampdist100 %>%
slice(1:200) %>%
mutate(pop_mean = mean(pop$x)) %>%
mutate(iteration = row_number()) %>%
mutate(covers = case_when(lower <= pop_mean & upper >= pop_mean ~ "Covers mean",
lower > pop_mean | upper < pop_mean ~ "Does not cover mean")) %>%
ggplot(aes(x = mean, y = iteration, color = covers)) +
geom_point(size = 0.5) +
geom_errorbarh(aes(xmin=lower, xmax = upper), linewidth = 0.25) +
theme_bw() +
labs(color = element_blank()) +
geom_vline(xintercept = pop_mean) +
scale_color_manual(values = c("navy","red"))
mean(samp$x) + qt(c(0.025, 0.975), df = 99)*sd(samp$x)/sqrt(nrow(samp))
191/200
