{
  "hash": "614bb41e5b619efbd839c1497c5603f2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Tutorial 3: Importing and Manipulating Data in R\"\nimage: spreadsheet.jpg\nformat: \n  html:\n    toc: true\n    toc-location: left\nengine: knitr\nfilters: \n  - webr\n  - naquiz\nwebr:\n  packages: ['tidyverse', 'readxl','skimr']\n  autoload-packages: false\n  cell-options:\n    editor-font-scale: 0.85\ncategories:\n    - code\ntitle-block-banner: \"#a2cffe\"\n---\n\n```{webr-r}\n#| context: setup\n\nurl.csv <- \"https://haleykgrant.github.io/tutorial_data/data/cdc.samp.csv\"\ndownload.file(url.csv, \"cdc.samp.csv\")\n\nurl.xlsx <- \"https://haleykgrant.github.io/tutorial_data/data/dds.xlsx\"\ndownload.file(url.xlsx, \"dds.xlsx\")\n\nurl.rda <- \"https://haleykgrant.github.io/tutorial_data/data/census.rda\"\ndownload.file(url.rda, \"census.rda\")\n\n\n```\n\n## Introduction\n\nIn this tutorial, you will learn about working with data in R. In particular, this tutorial will cover...\n\n-   Reading in data from different file types\n-   Data frame structure in R\n-   Updating and making new variables\n-   Filtering data\n\n## Files on your local computer\n\nWhen you are working in R on your local computer and you want to import a data file into your R session for an analysis, you will need to tell R where it can find the data file. This is why I suggested creating a 'data' folder in your class folder. If you save all of the data files for this class in that folder, you can always use the same general syntax for telling R where your file is.\n\nFor this tutorial, we are working on the web, so R doesn't have access to the local files on your device. I have included all of the data files we will be using in this tutorial on a webpage that we can access online. You may need to change this code slightly to when running code for your assignments in this class to work with your computer's file structure.\n\n### Checking your working directory\n\nOne good idea when you start working on a new analysis is to make sure you know where within your computer's file structure you are working so you can figure out how to access various files.\n\nWe can use the function `getwd()` to have R print out the path to the directory (folder) we are currently working in.\n\nTry running the code in this block:\n\n```{webr-r}\n# check your current working directory\n# there shouldn't be anything between the two parentheses here\ngetwd()\n\n```\n\n\nYou should see the output is \n\n::: {style=\"text-align: center;\"}\n[\"/home/web_user\"]{style=\"font-family: 'Courier New'; font-weight: 500;\"}\n:::\n\nThis is because we are working in R on the web. This is telling us that we are in a subdirectory of the \"home\" directory called \"web_user\". That is, \"web_user\" is a directory (folder) inside the larger directory (folder) called \"home\". You read file paths from left to right\n\nTry running this in your Console in RStudio on your computer, and you should see a file path that corresponds to the file structure on your computer.\n\n### List files in working directory\n\nTo check the files that are present in our current directory, we can use the function `list.files()` to list out all of the files that are stored in the directory where we are currently working. \n\nTry running the code in this block:\n\n```{webr-r}\n# print files in working directory\nlist.files()\n```\n\nThe output should look something like this:\n\n::: {style=\"text-align: center;\"}\n[[1] \"Rplots.pdf\"   \"cdc.samp.csv\" \"census.rda\"   \"dds.xlsx\"]{style=\"font-family: 'Courier New'; font-weight: 500;\"}\n:::\n  \nThis tells us that there are 4 files that we have access to in this directory:\n\n- a file called \"cdc.samp.csv\"\n- a file called \"census.rda\"\n- a file called \"dds.xlsx\"\n\nThere are the data files that we will be working with in this tutorial.\n\n## Types of files\n\nThe main types of files that we will work with in this class are:\n\n<style>\n  table {\n    border-collapse: collapse;\n    width: 100%;\n  }\n  th, td {\n    border: 1px solid #dddddd;\n    text-align: left;\n    padding: 8px;\n  }\n  th {\n    background-color: #f2f2f2;\n  }\n</style>\n\n<table>\n  <tr>\n    <th>File Type</th>\n    <th>Description</th>\n    <th>File Extension</th>\n  </tr>\n  <tr>\n    <td>CSV files </td>\n    <td> This stands for \"comma separated value\". These are files that have rows with entries separated by commas to indicate the different columns</td>\n    <td>.csv</td>\n  </tr>\n  <tr>\n    <td>Excel files</td>\n    <td>Files in Excel workbook/sheet format</td>\n    <td>.xls or .xlsx</td>\n  </tr>\n  <tr>\n    <td>R data files</td>\n    <td>Files with saved R objects</td>\n    <td>.RData or .rda</td>\n  </tr>\n</table>\n\nThe three files we will read in today have the following names:\n\n-   \"cdc.samp.csv\" : a csv file with demographic data from the cdc\n-   \"dds.xlsx\" : an excel file with data from the department of disability services in California\n-   \"census.rda\": an R data file with data from the US census\n\n\n\n## Importing Data\n\n\n### Reading in a csv file\n\nTo read in a csv file to R, we use the function `read.csv()`. There is a similar function in the `tidyverse` package called `read_csv()` that you could also use. We'll go ahead and use the tidyverse version.\n\nThe syntax to use this function is:\n\n::: {style=\"text-align: center;\"}\n`name_for_data = read_csv(\"path_to_data\")`\n:::\n\n-   Here `name_for_data` is any name you choose to call the data frame. It can be helpful to give it a name that is relevant to the data, but you can call it whatever you want (with some limits, for example the name can't start with a number).\n\n-   `\"path_to_data\"` is the file path that will tell R where to look for your data. You will see more examples of this in class, but for this example, the files are in our working directory so we don't need any long file paths to navigate through different directories. \n\nLet's try reading in the \"cdc.samp.csv\" file and give the dataframe the name `cdc`.\n\n```{webr-r}\n#| warning: false\n# read in the data file \"cdc.samp.csv\"\ncdc = read_csv(\"cdc.samp.csv\")\n```\n\n\n::: {.callout-tip collapse=\"true\" icon=\"false\"}\n## Hint (if you get an error)\n\nIf you get the following error:\n\n::: {style=\"text-align: center;\"}\n[Error: could not find function \"read_csv\"]{style=\"color: #BB0000; font-family: 'Courier New'; font-weight: 500;\"}\n:::\n\nyou forgot to load the tidyverse package!\n\nAdd a line of code above your read_csv() line to load the tidyverse (`library(tidyverse)`).\n:::\n\n::: {.callout-note collapse=\"true\" icon=\"false\"}\n## Answer\n\n```{webr-r}\n#| warning: false\n# load tidyverse package first\nlibrary(tidyverse)\n\n# read in the data file \"cdc.samp.csv\"\ncdc = read_csv(\"cdc.samp.csv\")\n```\n:::\n\n\n### View your data\n\nGreat! We've now read our first data file into R. But how do we know if it worked?\n\nIn RStudio, you should be able to see a new object in your 'Environment' tab in the upper-right quadrant of your screen when you import a new data set. Since we're working on the web, we'll go ahead and use a different function to take a look at the top few rows of the dataset. The function that will allow us to do this is `head()` that shows us the top few entries of a data frame, vector, or list.\n\n```{webr-r}\n# show top few rows of the data set `cdc`\nhead(cdc)\n\n```\n\n::: {.callout-tip collapse=\"true\" icon=\"false\"}\n## Hint (if you get an error)\n\nIf you get the following error:\n\n::: {style=\"text-align: center;\"}\n[Error: object 'cdc' not found]{style=\"color: #BB0000; font-family: 'Courier New'; font-weight: 500;\"}\n:::\n\nthis is R's way of telling you that you don't currently have an object loaded into your environment called 'cdc'. \n\nWhen you see an error like this, you should make sure the code used to import the data worked properly and that you don't have any spelling errors (R is case sensitive so you have to be very careful to spell things exactly correctly).\n\nMake sure you were able to successfully run the code above with the `read_csv()` function without any errors before running this code block.\n:::\n\nAwesome! Here we see the top 6 rows of the `cdc` dataframe. There are 9 columns: <span style=\"font-family: Courier New;\"> genhlth, exerany, hlthplan, smoke100, height, weight, wtdesire, age, gender.</span>\n\n\nAnother way we can start to take a look at the data is to use a function from the R package `skmir`. The function is called `skim` and gives us a nice overview of the contents included in our data.\n\n```{webr-r}\n#| warning: false\n# load skimr library\nlibrary(skimr)\n\n# use the skim() function on the cdc data\nskim(cdc)\n\n```\n\nThis function breaks our columns into groups based on the type of variable they are. Here we see that <span style=\"font-family: Courier New;\"> genhlth</span> and  <span style=\"font-family: Courier New;\"> gender</span> are characters and the rest are being treated as numeric (even though it looks like we may have a few other binary variables )\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}