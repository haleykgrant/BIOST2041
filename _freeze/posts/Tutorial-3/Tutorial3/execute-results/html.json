{
  "hash": "8c4f8a2995036ac98beefb40ea48490d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Tutorial 3: Importing Data in R\"\nauthor: \"Haley Grant\"\nimage: files2.jpg\nformat: \n  html:\n    toc: true\n    toc-location: left\nengine: knitr\nfilters: \n  - webr\n  - naquiz\nwebr:\n  packages: ['tidyverse', 'readxl','skimr']\n  autoload-packages: false\n  cell-options:\n    editor-font-scale: 0.85\ncategories:\n    - code\ntitle-block-banner: \"#a2cffe\"\n---\n\n\n```{webr-r}\n#| context: setup\n\nurl.csv <- \"https://haleykgrant.github.io/tutorial_data/data/cdc.samp.csv\"\ndownload.file(url.csv, \"cdc_samp.csv\")\n\nurl.xlsx <- \"https://haleykgrant.github.io/tutorial_data/data/dds.xlsx\"\ndownload.file(url.xlsx, \"dds.xlsx\")\n\nurl.rda <- \"https://haleykgrant.github.io/tutorial_data/data/census.rda\"\ndownload.file(url.rda, \"census.rda\")\n\n\n```\n\n## Introduction\n\nIn this tutorial, you will learn about working with data in R. In particular, this tutorial will cover importing data from various file types into R including:\n\n- csv files\n- Excel files\n- R data files\n\n\n## Getting Set Up\n\n### Files on your local computer\n\nWhen you are working in R on your local computer and you want to import a data file into your R session for an analysis, you will need to tell R where it can find the data file. This is why I suggested creating a 'data' folder in your class folder. If you save all of the data files for this class in that folder, you can always use the same general syntax for telling R where your file is.\n\nFor this tutorial, we are working on the web, so R doesn't have access to the local files on your device. I have included all of the data files we will be using in this tutorial on a webpage that we can access online. You may need to change this code slightly to when running code for your assignments in this class to work with your computer's file structure.\n\n### Checking your working directory\n\nOne good idea when you start working on a new analysis is to make sure you know where within your computer's file structure you are working so you can figure out how to access various files.\n\nWe can use the function `getwd()` to have R print out the path to the directory (folder) we are currently working in.\n\nTry running the code in this block:\n\n```{webr-r}\n# check your current working directory\n# there shouldn't be anything between the two parentheses here\ngetwd()\n\n```\n\nYou should see the output is\n\n::: {style=\"text-align: center;\"}\n[\\left\"/home/web_user\\right\"]{style=\"font-weight: 500;\"}\n:::\n\nThis is because we are working in R on the web. This is telling us that we are in a sub-directory of the \"home\" directory called \"web_user\". That is, \"web_user\" is a directory (folder) inside the larger directory (folder) called \"home\". You read file paths from left to right\n\nTry running this in your Console in RStudio on your computer, and you should see a file path that corresponds to the file structure on your computer.\n\n### List files in working directory\n\nTo check the files that are present in our current directory, we can use the function `list.files()` to list out all of the files that are stored in the directory where we are currently working.\n\nTry running the code in this block:\n\n```{webr-r}\n# print files in working directory\nlist.files()\n```\n\nThe output should look something like this:\n\n::: {style=\"text-align: center;\"}\n[\\[1\\] \"cdc_samp.csv\" \"census.rda\" \"dds.xlsx\"]{style=\"font-family: 'Monaco'; font-weight: 500;\"}\n:::\n\nThis tells us that there are 4 files that we have access to in this directory:\n\n-   a file called \"Rplots.pdf\" that we won't be working with\n-   a file called \"cdc_samp.csv\"\n-   a file called \"census.rda\"\n-   a file called \"dds.xlsx\"\n\nThere are the data files that we will be working with in this tutorial.\n\n## Types of files\n\nThe main types of files that we will work with in this class are:\n\n\n```{=html}\n<style>\n  table {\n    border-collapse: collapse;\n    width: 100%;\n  }\n  th, td {\n    border: 1px solid #dddddd;\n    text-align: left;\n    padding: 8px;\n  }\n  th {\n    background-color: #f2f2f2;\n  }\n</style>\n```\n\n+--------------+--------------------------------------------------------------------------------------------------------------------------------------------+----------------+\n| File Type    | Description                                                                                                                                | File Extension |\n+==============+============================================================================================================================================+================+\n| CSV files    | This stands for \"comma separated value\". These are files that have rows with entries separated by commas to indicate the different columns | .csv           |\n+--------------+--------------------------------------------------------------------------------------------------------------------------------------------+----------------+\n| Excel files  | Files in Excel workbook/sheet format                                                                                                       | .xls or .xlsx  |\n+--------------+--------------------------------------------------------------------------------------------------------------------------------------------+----------------+\n| R data files | Files with saved R objects                                                                                                                 | .RData or .rda |\n+--------------+--------------------------------------------------------------------------------------------------------------------------------------------+----------------+\n\nThe three files we will read in today have the following names:\n\n-   \"cdc_samp.csv\" : a csv file with demographic data from the cdc\n-   \"dds.xlsx\" : an excel file with data from the department of disability services in California\n-   \"census.rda\": an R data file with data from the US census\n\n## Importing Data\n\n### Reading in a csv file\n\nTo read in a csv file to R, we use the function `read.csv()`. There is a similar function in the `tidyverse` package called `read_csv()` that you could also use. We'll go ahead and use the tidyverse version.\n\nThe syntax to use this function is:\n\n::: {style=\"text-align: center;\"}\n`name_for_data = read_csv(\"path_to_data\")`\n:::\n\n-   Here `name_for_data` is any name you choose to call the data frame. It can be helpful to give it a name that is relevant to the data, but you can call it whatever you want (with some limits, for example the name can't start with a number).\n\n-   `\"path_to_data\"` is the file path that will tell R where to look for your data. You will see more examples of this in class, but for this example, the files are in our working directory so we don't need any long file paths to navigate through different directories.\n\n::: {.callout-warning}\n## Assigning a name\n\n**Warning:** Naming the object is very important!\n\nIf you forget to choose a name for your dataframe, R will read in the data and print it, but it won't save it as an object. If you just use `read_csv()` without the `name_for_data =` part, you won't be able to manipulate or analyze the data\n:::\n\n::: {.callout-warning}\n## Duplicate names\n\n**Another warning:** If you read in two datasets and accidentally give them the same name, *the one you run second will overwrite the first one*! Sometimes this is useful; for example, if you just want to make a change to a dataset (more on this later). But be careful and when in doubt, give new dataframes different names!\n:::\n\nLet's try reading in the \"cdc_samp.csv\" file and give the dataframe the name `cdc`.\n\n```{webr-r}\n# read in the data file \"cdc_samp.csv\"\ncdc = read_csv(\"cdc_samp.csv\")\n```\n\n::: {.callout-tip collapse=\"true\" icon=\"false\"}\n## Hint (if you get an error)\n\nIf you get the following error:\n\n::: {style=\"text-align: center;\"}\n[Error: could not find function \"read_csv\"]{style=\"color: #db4133; font-family: 'Monaco'; font-weight: 500;\"}\n:::\n\nyou forgot to load the tidyverse package!\n\nAdd a line of code above your read_csv() line to load the tidyverse (`library(tidyverse)`).\n:::\n\n::: {.callout-note collapse=\"true\" icon=\"false\"}\n## Answer\n\n```{webr-r}\n#| warning: false\n\n# load tidyverse package first\nlibrary(tidyverse)\n\n# read in the data file \"cdc_samp.csv\"\ncdc = read_csv(\"cdc_samp.csv\")\n```\n:::\n\n### Viewing your data\n\nGreat! We've now read our first data file into R. But how do we know if it worked?\n\nWe're going to take a brief detour to talk about taking a first look at your data before we move on to importing data from other files types.\n\n#### The head() function\n\nIn RStudio, you should be able to see a new object in your 'Environment' tab in the upper-right quadrant of your screen when you import a new data set. Since we're working on the web, we'll go ahead and use a different function to take a look at the top few rows of the dataset. The function that will allow us to do this is `head()` that shows us the top few entries of a data frame, vector, or list.\n\n```{webr-r}\n# show top few rows of the data set `cdc`\nhead(cdc)\n\n```\n\n::: {.callout-tip collapse=\"true\" icon=\"false\"}\n## Hint (if you get an error)\n\nIf you get the following error:\n\n::: {style=\"text-align: center;\"}\n[Error: object 'cdc' not found]{style=\"color: #db4133; font-family: 'Monaco'; font-weight: 500;\"}\n:::\n\nthis is R's way of telling you that you don't currently have an object loaded into your environment called 'cdc'.\n\nWhen you see an error like this, you should make sure the code used to import the data worked properly and that you don't have any spelling errors (R is case sensitive so you have to be very careful to spell things exactly correctly).\n\nMake sure you were able to successfully run the code above with the `read_csv()` function without any errors before running this code block.\n:::\n\nAwesome! Here we see the top 6 rows of the `cdc` dataframe. There are 9 columns: [ genhlth, exerany, hlthplan, smoke100, height, weight, wtdesire, age, gender.]{style=\"font-family: Monaco;\"}\n\n#### The skim() function\n\nAnother way we can start to take a look at the data is to use a function from the R package `skmir`. The function is called `skim` and gives us a nice overview of the contents included in our data.\n\n```{webr-r}\n#| warning: false\n#| context: interactive\n#| autorun: true\n# load skimr library\nlibrary(skimr)\n```\n\n```{webr-r}\n# use the skim() function on the cdc data\nskim(cdc)\n\n```\n\nThis function breaks our columns into groups based on the type of variable they are. Here we see that [ genhlth]{style=\"font-family: Monaco;\"} and [ gender]{style=\"font-family: Monaco;\"} are characters and the rest are being treated as numeric (even though it looks like we may have a few other binary variables that were coded as 0/1---more on this later). The summary information gives us a snapshot of the contents of each column in the data. More information about the specific sections of the output can be found below.\n\n::: {.callout-note collapse=\"true\"}\n## Understanding `skim()` output\n\nThe columns for categorical variables are:\n\n+---------------+-------------------------------------------------------------------------+\n| Attribute     | Description                                                             |\n+===============+=========================================================================+\n| n_missing     | the number of rows with missing value (NA) in the corresponding columns |\n+---------------+-------------------------------------------------------------------------+\n| complete_rate | proportion of rows that are not missing (not NAs)                       |\n+---------------+-------------------------------------------------------------------------+\n| min           | the minimum character length of values in the column                    |\n+---------------+-------------------------------------------------------------------------+\n| max           | the maximum character length of values in the column                    |\n+---------------+-------------------------------------------------------------------------+\n| empty         | the number of empty characters in the column                            |\n+---------------+-------------------------------------------------------------------------+\n| n_unique      | the number of unique values in the column                               |\n+---------------+-------------------------------------------------------------------------+\n| whitespace    | the number of rows containing only white space in the column            |\n+---------------+-------------------------------------------------------------------------+\n\nThe columns for numeric variables are:\n\n+---------------+---------------------------------------------------------------------------+\n| Attribute     | Description                                                               |\n+===============+===========================================================================+\n| n_missing     | the number of rows with missing value (NA) in the corresponding columns   |\n+---------------+---------------------------------------------------------------------------+\n| complete_rate | proportion of rows that are not missing (not NAs)                         |\n+---------------+---------------------------------------------------------------------------+\n| mean          | the mean (average) value of the non-missing values in the column          |\n+---------------+---------------------------------------------------------------------------+\n| sd            | the standard deviation of the non-missing values in the column            |\n+---------------+---------------------------------------------------------------------------+\n| p0            | the minimum value observed in the column                                  |\n+---------------+---------------------------------------------------------------------------+\n| p25           | the 25th percentile of values observed in the column                      |\n+---------------+---------------------------------------------------------------------------+\n| p50           | the median (50th percentile) of values observed in the column             |\n+---------------+---------------------------------------------------------------------------+\n| p75           | the 75th percentile of values observed in the column                      |\n+---------------+---------------------------------------------------------------------------+\n| p100          | the maximum value observed in the column                                  |\n+---------------+---------------------------------------------------------------------------+\n| hist          | a histogram showing the shape of the distribution of values in the column |\n+---------------+---------------------------------------------------------------------------+\n:::\n\nBack to reading in data from various file types...\n\n### Reading in an Excel file\n\nWe've successfully read in a csv file, but what if we get a different file type? For example, a lot of people store data in Excel. Can R handle those files? Yep! But we're going to need to use a new package called the `readxl` package.\n\n::: {.callout-caution collapse=\"true\"}\n## Reminder: Installing `readxl`\n\nRemember that if you don't have this package installed on your local computer, you'll need to install it before you can load and use it. I've already installed it here, but remember that to install the package you can just run `install.packages(\"readxl\")` in your console in R Studio.\n:::\n\nOnce we have the `readxl` package loaded, the syntax is very similar to `read_csv()` from above. There are a few different functions that could work from this package, but the most generic one is `read_excel()`. The syntax is:\n\n::: {style=\"text-align: center;\"}\n`name_for_data = read_excel(\"path_to_data\")`\n:::\n\nLet's try it using our 'dds.xlsx' file!\n\n```{webr-r}\n# load the readxl package \nlibrary(readxl)\n\n# save the data contained in dds.xlsx under the name `dds`\ndds = read_excel(\"dds.xlsx\")\n\n# make sure it worked by looking at the first few rows\nhead(dds)\n```\n\nAwesome! We can see that there are 6 columns in this data set: [ id, age.cohort, age, gender, expenditure, ethnicity.]{style=\"font-family: Monaco;\"}\n\nOnce you have the `readxl` package, importing Excel files works just like reading in csv files!\n\n### Importing R data files\n\nThere is one other type of file that we will use from time to time in this class. This is a special kind of file called an R data file that saves R objects. **The syntax is slightly different for these kinds of files.**\n\nThe syntax for importing an R data file is:\n\n::: {style=\"text-align: center;\"}\n`load(\"path_to_data\")`\n:::\n\n::: callout-warning\n## load()\n\nNotice how we didn't include anything on the left side of the `load()` function here. We didn't give the data a name!\n:::\n\nThe reason we don't assign names to data loaded from an R data file is because **these objects already come with a name**. Since these are R objects that were saved specifically in a file format that R understands, they keep the name that they were given when they were first created in R. So how do we know what the name is? We can add an extra argument to this function called `verbose`. The syntax will become:\n\n::: {style=\"text-align: center;\"}\n`load(\"path_to_data\", verbose = TRUE)`\n:::\n\nThis tells R to print out the name of the data object once it is loaded so we know what to call it.\n\nLet's see an example of this using our 'census.rda' file.\n\n```{webr-r}\n# load in the data\n# add verbose = TRUE so the object name gets printed\n\nload(\"census.rda\", verbose = TRUE)\n\n```\n\nWe can see the message:\n\n::: {style=\"text-align: center;\"}\n[Loading objects:<br>  census]{style=\"font-family: 'Monaco'; font-weight: 500; display: inline-block; text-align: left;\"}\n:::\n\nThis is telling us that the object we loaded came with the name `census`. This is the name we should use to refer to that data object.\n\n::: {.callout-note collapse=\"true\"}\n## Note: file names vs object names\n\nThe name of the R object doesn't have to match with the file name like it did in this example. The file name \"census.rda\" and the object name `census` are two independent things. However, it can be helpful to have the file name and object name match, so they often will by convention.\n:::\n\nFor example, we can take a look at the top few rows of data using the `head()` function again. This time we'll just look at the top 3 by adding the argument `n = 3`.\n\n```{webr-r}\n# look at top 3 rows of census data \nhead(census, n = 3)\n\n```\n\n### Other file types\n\nThere are other types of files that you may want to import into R. These include text files (.txt) and files from other statistical software packages like SAS (.sas7bdat) or stata (.dta). The syntax for reading in these files is very similar to reading in csv or Excel files so we won't go into these data types in detail. There are lots of helpful tutorials and R documentation online if you ever need them (for example, [this page](https://dk81.github.io/dkmathstats_site/ranalysis-readfile-types.html) goes through reading in files from multiple sources).\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}