{
  "hash": "558170d1803a8a3d329103203417d8ac",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Tutorial 2: R Objects and Functions\"\nformat: \n  html:\n    toc: true\n    toc-location: left\nengine: knitr\nfilters: \n  - webr\n  - naquiz\nwebr:\n  packages: ['tidyverse']\n  autoload-packages: false\ncategories:\n    - code\n---\n\n\n\n## Introduction\n\nIn this tutorial, you will learn about\n\n* R objects\n* Data types in R\n* Functions in R\n* Installing and using R packages\n\n\n### Working through the tutorial\n\n#### Running the code chunks in this tutorial\n\nIn this tutorial I will introduce a handful of new concepts in R and example code to demonstrate how the code works. When you get to a code chunk (an example of a code chunk is shown below), you can edit the code in the chunk if there are instructions to do so, and run the code to see what the output is by either hitting the \"run code\" button or by placing your cursor in the code chunk you want to execute and hitting `command (⌘) + return (↩)` (on mac) or `Ctrl + Enter` (on windows).\n\n#### The 'Start Over' button\n\nEach code chunk has a <span style=\"border: 1px solid black; padding: 2px;border-radius: 5px; position: relative;margin-right: 3px;\">\n  <i style=\"font-size: 12px; position: absolute; top: 4px; left: 4px;\" class=\"fa\">&#xf021;</i>\n  <span style=\"margin-left: 20px;\">Start Over </span>\n</span> button in the upper left corner that allows you to reset the code.If you make a mistake and want to start over, hit this button! There is also a 'Start Over' button on the lefthand side navigation bar if you want to start the tutorial over from the first page.\n\n#### Comments\n\nYou may notice some lines of code that start with the pound sybmol, `#`, and show up in a different color. These are called __comments__. R doesn't execute anything when it sees a comment, it's just a note to yourself or anyone else reading your code! It's good practice to add comments to your code at each line to help you remember what the code was meant to do, or to help someone else who is reading your code see what you were trying to do. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# this is an example of a comment!\n```\n:::\n\n\n__Exercise:__ Try writing your own comment in the code chunk below!\n\n```{webr-r}\n\n\n```\n\n\n\n::: {.callout-tip collapse=\"true\" icon=\"false\"}\n## Hint\n\nThink about what the line of code should *start* with.\n:::\n\n::: {.callout-note collapse=\"true\" icon=\"false\"}\n## Answer\n\n```{webr-r}\n# this is a comment\n# anything starting with the # sign is a comment\n```\n:::\n\n\n\n## R objects\n\nThe console in R (the bottom quadrant of the RStudio interface) can be used essentially as a calculator. We can do lots of operations in the console and have R print out the answer for us.\n\nFor example, if we want to check what `2+3` is, we can run the code: \n\n```{webr-r}\n# add 2 + 3\n2 + 3\n```\n\n\n\nWhen you run the code above, it prints out the number 5. That's great, but maybe I don't want to have to type that every time I want to use those numbers. This is where R objects come in. For example, maybe I have a variable that I want to call `x` that will hold the number 2 and a different variable called `y` that will hold the number 3. I can do this with the following code\n\n```{webr-r}\n# assign the value 2 to x\nx = 2\n# assign the value 2 to x\ny = 3\n\n```\n\n\n\n__Side note:__ Sometimes you might see the operator `<-` (for example `x <- 2 `) instead of the equals sign (`=`). This is an artifact of earlier versions of R when you had to use `<-` to assign values to objects; both work now and `=` is shorter so I used it here :)\n\nNote that when you run this code, nothing happens! Or at least, that's what it looks like. If we were running this in RStudio, we would see in the upper right quadrant under the \"Environment\" tab that we now have two objects, x and y, that have the values 2 and 3 respectively. To see this here, we can print out the values:\n\n```{webr-r}\n# print x\nx \n# print y\ny \n```\n\nCool! Now that `x` and `y` are placeholders for the numbers 2 and 3, we can use them just like numbers. For example, we can add them together, multiply them, divide, subtract, etc. If we want to save the value of `x + y` for later use, we can do that too! \n\n```{webr-r}\n# print x + y\nx + y\n\n# print x - y\nx - y\n\n# print x times y\nx * y\n\n# print x divided by y\nx / y\n\n\n# print x squared\nx^2\n\n# print the log (base e) of x \nlog(x)\n\n# print the exponentiated value of x (e^x)\nexp(x)\n\n# save x + y as z\nz = x + y\n\n# print the value of z\nz\n\n```\n\n\n## Types of Data\n\nIn the example above, we were using numeric variables. However, there are many different types of data in R. Some of the main types of data we will use are\n\n* __numeric__: numbers\n* __character__: character strings/words\n* __factor__: categorical variables that store data in levels\n* __logical__: binary TRUE/FALSE \n* __NA__: stand-in for missing values\n\n### Numeric\n\n```{webr-r}\n# save x_numeric object with the value 5\nx_numeric = 5\n# print value\nx_numeric\n# print out the type of variable\nclass(x_numeric)\n```\n\n### Character\n\nThis is a number to we can use the same types of functions as we used above on the object `x_numeric` (adding, subtracting, etc.).\n\n```{webr-r}\n# save x_character object with the value \"5\"\nx_character = \"5\"\n# print value\nx_character\n# print out the type of variable\nclass(x_character)\n```\n\nThis is a character. Even though it looks like a number, the quotation marks tell R that we don't want to treat this as the number 5. For example, maybe this is and identifier for hospital number 5 in a study. In this case, we probably don't want to do typical calculations as if this was the number 5. \n\n__Exercise:__ See what happens when you try to multiply `x_character` by 2.\n\n```{webr-r}\n# try multiplying x_character by 2\n\n```\n\n\n### Error messages \n\nOh no! You should see the following error message:\n\n<div style=\"text-align: center;\">\n<span style=\"color: #BB0000; font-family: 'Courier New'; font-weight: 500;\"> Error: non-numeric argument to binary operator</span>\n</div>\n\nThis is how R is telling you that you're trying to apply a function that requires a number to an object that isn't a number. R gives helpful error messages like this when you try to run code that doesn't work. Sometimes the language R uses is hard to understand, but you can always ask me or a TA what the error means, or search the error on Google!\n\n__Exercise:__ If you change `x_character` to `x_numeric` in the code above, you should see it works just fine!\n\n### Factor\n\n```{webr-r}\n# save x_factor objects as a factor variable with the levels \"5\" and label this level \"The number 5\"\nx_factor = factor(x = x_character, levels = \"5\", labels = \"The number 5\")\n# print value\nx_factor\n# print out the type of variable\nclass(x_factor)\n\n```\n\nHere we can see that `x_factor` is a factor variable. It may not be obvious why this is useful yet, but it should hopefully become clear as the semester goes on. Factors are essentially a way that you can pick the order that categorical variable levels are presented and give the variables nice names for things like printing in a plot.\n\n### Logical\n\nR has another type of data called \"logical\" values. These are binary TRUE/FALSE (can also abbreviate with T/F) that let you know if a statement is true or false. This can be really useful when we want to filter data. For example, if we want to filter data to everyone over the age of 50, we can check the logical variables to check if age is greater than or equal to 50.\n\nIn the example below we'll make a new variable to tell us if `x_numeric` from above is equal to the number 5.\n\n\n```{webr-r}\n# save x_logical as a TRUE/FALSE statement\n# the `==` operator is R's way of saying \"is the thing on the left equal to the thing on the right?\"\nx_logical = (x_numeric == 5)\n\n# print value \nx_logical\n\n# show variable type\nclass(x_logical)\n\n\n```\n\n__Exercise:__ Try changing the value in the code above to check if `x_numeric` is equal to the number 4 to see how the value would change.\n\n### Missing Values\n\nR has a special way of denoting missing values. In R, these show up as `NA` values. For example, if you have a data set with 100 individuals' height, weight, and age, if you weren't able to get the values measured for some of the individuals, those values should show up as `NA` values to indicate that they are missing. \n\n__Note:__ this is different from \"NA\" the character. R will change the color of `NA` when you type it in your code to show that this is a special kind of variable.\n\n```{webr-r}\n# save x_missing as NA value\nx_missing = NA\n\n# print value \nx_missing\n```\n\n__Exercise:__ Try multiplying the `x_missing` variable by 2 and see what happens. \n\n```{webr-r}\n# multiple x_missing by 2\n\n\n```\n\n\n\nGenerally any kind of functions applied to missing values return another `NA` value unless the function has a special way of handling missing values.\n\n## Vectors\n\nWe don't have to save values in R individually. We can also save a bunch of values (numbers, characters, factors, etc.) together in something called a vector.\n\nWe can make these types of objects in R using the `c()` function (this stands for \"concatenate\") to put a bunch of values together in a vector.\n\n```{webr-r}\n# make a vector with the values 1, 2, 3, 1, 2, 3\nx_vector = c(1, 2, 3, 1, 2, 3)\n# print the vector to take a look\nx_vector\n```\n\nWe can do lots of fun stuff in R with vectors. For example, we can multiply every entry of the vector by 2 (if all of the entries are numeric), taking the mean, sum, or standard deviation of a numeric vector, show the unique entries of the vector, and much more!\n\n#### Multiply by 2\n\n```{webr-r}\n# multiply vector entries by 2\nx_vector * 2\n```\n\n#### Take the mean\n\n```{webr-r}\n# take the mean of the vector values\nmean(x_vector)\n```\n\n#### Take the sum\n\n```{webr-r}\n# take the sum of the vector values\nsum(x_vector)\n```\n\n#### Take the standard deviation\n\n```{webr-r}\n# take the standard deviation of the vector values\nsd(x_vector)\n```\n\n#### Show the unique values\n\n```{webr-r}\n# show the unique values contained in the vector\nunique(x_vector)\n```\n\n#### Print the length of the vector \n\n```{webr-r}\n# show the length of the vector\nlength(x_vector)\n\n```\n\n## Functions\n\nWe've already shown some examples of functions in R. You can think of R functions kind of like a recipe. You need to tell R what dish you want to make (the function) and give it some ingredients (called arguments), and then R will make the dish for you! \n\nFunctions in R all using the same syntax:\n\n<div style=\"text-align: center;\">\n<span style=\"font-family: 'Courier New';\">`function_name(argument1 , argument2 , ...)`</span>\n</div>\n\nwhere here the name of the function is `function_name` and the arguments for the function are passed to the function inside a set of parentheses.\n\nFor example, the `mean()` function we used above is a built-in R function that takes a vector of numbers (it can also take a vector of logical values or some more advanced data types like dates) and returns the mean (average) value by adding up all of the entries in the vector and dividing by the length. Functions in R are really helpful because it means we don't have to write out the full code ourselves. \n\nFor example, both lines of code below do the same thing, but one is a lot easier (imagine if the vector had been even longer)!\n\n\n```{webr-r}\n# the mean of x_vector\nmean(x_vector)\n\n# calculating the mean by hand\n(1 + 2 + 3 + 1 + 2 + 3)/6\n\n```\n\n\n## R Packages\n\n### What is an R package\n\nR comes with a lot of great built-in, ready-to-use functions, but there are probably lots of other functions that we might want to use that don't come built in to R. You can write your own functions in R if you want, but usually someone else has already written the kind of function you want to use. This is where R packages come in.\n\nThe following description of R packages comes from [this R Basics Tutorial from R-Ladies Sydney](https://rladiessydney.org/courses/ryouwithme/01-basicbasics-0/).\n\n> A package is a bundle of code that a generous person has written, tested, and then given away. Most of the time packages are designed to solve a specific problem, so they to pull together functions related to a particular data science problem (e.g., data wrangling, visualisation, inference). Anyone can write a package, and you can get packages from lots of different places, but for beginners the best thing to do is get packages from CRAN, the Comprehensive R Archive Network. It’s easier than any of the alternatives, and people tend to wait until their package is stable before submitting it to CRAN, so you’re less likely to run into problems. You can find a list of all the packages on CRAN [here](https://cran.r-project.org/).\n\n### How to install R packages\n\n{{< video https://vimeo.com/203516241>}}\n\n\n### Test your knowledge\n\n\n::: {.cell}\n\n:::\n\n\n\n### Loading Packages\n\nJust because you installed an R package once, doesn't mean you want to use it for every task you do in R. Because of this, R will automatically load a small set of default packages when you launch a new session, but you'll need to tell it if you want to use any additional packages. To load a library that isn't loaded by default, we use \n\n<div style=\"text-align: center;\">\n`library(package_name)`\n</div>\n\n::: {.callout-important collapse=\"true\"}\n## Note\n\nAnother reason we don't automatically load all of the packages we've ever installed on our computer is because sometimes different packages have functions that are named the same thing (this is because R is open-source)! When this happens, it can be frustrating to try to figure out which version of the function R is using and requires extra code to tell R which version of the function you want to use. To avoid this it is best practice to only load the packages you currently need.\n:::\n\n\n\n### The tidyverse package\n\nThe R `tidyverse` package is a very useful suite of packages that make data manipulation and visualization clean and efficient. To see all of the packages included in the `tidyverse package` run the following code:\n\n```{webr-r}\n# print the packages contained in the tidyverse\ntidyverse_packages()\n\n```\n\n::: {.callout-tip collapse=\"true\" icon=\"false\"}\n## Hint\n\nThis should produce an error when you first try to run it. Can you tell why?\n:::\n\n\n\n\n### Error message\n\nOh no! We got another error message. You should see the following error:\n\n<div style=\"text-align: center;\">\n<span style=\"color: #BB0000; font-family: 'Courier New'; font-weight: 500;\">Error: could not find function \"tidyverse_packages\" </span>\n</div>\n\nThis is R's way of telling you that you're trying to use a function that it doesn't have access to. The `tidyverse_packages()` function comes from the `tidyverse` package. Even if you have the tidyverse *installed* on your computer, that doesn't mean you have it *loaded* for R to use. \n\nTo give ourselves access to the functions from the `tidyverse` package, let's add the line of code `library(tidyverse)` before the line of code in the chunk above. That should fix the problem. \n\n\n__Exercise:__ Add the line of code `library(tidyverse)` before the line of code in the chunk above and try rerunning the code chunk.\n\n\n### The pipe operator from the tidyverse\n\nOne of the unique functions provided by the `tidyverse` is called the \"pipe operator.\" The pipe operator looks like this:  `%>%` (recent updates to R also let you use `|>` as the pipe operator, but I'm old so I still use `%>%` :) ). The pipe operator is a way of stringing together a bunch of functions and the purpose is to make your code easier to read. \n\nTo see an example of this, consider the following task: \n\nWe want to know how many unique values are contained in the vector `x_vector`.\n\nTo do this, we can start by having R grab the unique values in `x_vector` using `unique(x_vector)`.This will give us a vector of the unique values in `x_vector`. Then, we can print the length of the output of `unique(x_vector)` to get the number of unique values. \n\nTo do this, we could define a new intermediate vector called `x_unique` to hold the vector of unique values in `x_vector`, or we can just use multiple functions simulatneously by nesting the parentheses:\n\n```{webr-r}\n# take x_vector from earlier, \n# grab the unique values,\n# then show the length of the unique values to count the number of unique values\nlength(unique(x_vector))\n\n```\n\nNotice how the order of operations was:\n\n1. Start with your input `x_vector`\n\n2. Determine the unique values of `x_vector`\n\n3. Calculate length of `unique(x_vector)`\n\nHowever, reading left-to-right we see the last step first. This can get particularly confusing when we want to apply multiple sequential functions to the same object in R. Imagine we had wanted to do 3 more functions! This would have read as:\n\n<div style=\"text-align: center;\">\n`function3(function2(function1(length(unique(x_vector)))))`\n</div>\n\nThat's a lot of parentheses and it's hard to even figure out where the operation starts!\n\nTo fix this, we can use the pipe operator:\n\n```{webr-r}\n# same thing as above but with the pipe operator\nx_vector %>% unique() %>% length()\n\n```\n\nSee how the output is the same but the order of operations is much clearer in this example? It's clear that we start with the object `x_vector`, which we then extract just the unique values from, then finally calculate the length of just the vector of unique values. \n\nIn the example above with an extra 3 functions at the end, this would read as:\n\n<div style=\"text-align: center;\">\n`x_vector %>% unique() %>% length() %>% function1() %>% function2()  %>% function3() `\n</div>\n\nStill long, but a lot easier to follow (at least I think so)!\n\n## End of tutorial\n\nThat's it! The next tutorial will be about reading in and manipulating data in R.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}