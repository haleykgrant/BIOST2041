[
  {
    "objectID": "biost2041.html",
    "href": "biost2041.html",
    "title": "BIOST2041",
    "section": "",
    "text": "Welcome To BIOST 2041\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nHaley Grant\n\n\n\n\n\n\n\n\n\n\n\n\nTutorial 1: Installing R and RStudio\n\n\n\n\n\n\nsoftware\n\n\nR coding\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To BIOST 2041",
    "section": "",
    "text": "This blog will house the R tutorials that I will use this semester."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This is a landing page for R tutorials for BIOST 2041 and 2141."
  },
  {
    "objectID": "posts/Tutorial-1/Tutorial1.html#welcome-to-the-installing-r-tutorial",
    "href": "posts/Tutorial-1/Tutorial1.html#welcome-to-the-installing-r-tutorial",
    "title": "Tutorial 1: Installing R and RStudio",
    "section": "Welcome to the Installing R Tutorial",
    "text": "Welcome to the Installing R Tutorial\nThis tutorial was developed based on this resource. The goal is to make sure you have R and Rstudio installed on your computer and make sure you have a folder set up for this class to make your semester go smoother.\n\nOutline\nThis tutorial will help you set up your computer to use R. It is for you if you need to:\n\nInstall R on your computer\nInstall the RStudio IDE\nGet set up with R projects\n\nYou can skip this tutorial if you’ve already done these things."
  },
  {
    "objectID": "posts/Tutorial-1/Tutorial1.html#install-r",
    "href": "posts/Tutorial-1/Tutorial1.html#install-r",
    "title": "Tutorial 1: Installing R and RStudio",
    "section": "Install R",
    "text": "Install R\n\nHow to install R\n\nIf you need to download R, head over to the CRAN website to download R.\nIf you’ve already done this, we’ll move to the next step!"
  },
  {
    "objectID": "posts/Tutorial-1/Tutorial1.html#install-rstudio",
    "href": "posts/Tutorial-1/Tutorial1.html#install-rstudio",
    "title": "Tutorial 1: Installing R and RStudio",
    "section": "Install RStudio",
    "text": "Install RStudio\n\nHow to install RStudio\nRStudio is an Integrated Development Environment (IDE) for R. What does that mean? Well, if you think of R as a language, which it is, you can think of RStudio as a program that helps you write and work in the language. RStudio makes programming in R much easier and I suggest that you use it!\n\nIf you need to download RStudio, head over to the RStudio website to download RStudio. There are also some helpful tutorials on this website!\nIf you’ve already done this, we’ll move to the next step!"
  },
  {
    "objectID": "posts/Tutorial-1/Tutorial1.html#r-projects",
    "href": "posts/Tutorial-1/Tutorial1.html#r-projects",
    "title": "Tutorial 1: Installing R and RStudio",
    "section": "R Projects",
    "text": "R Projects\nR projects make it easy to keep files relating to the same content organized. I recommend making a folder and an R project for this class. This will allow you to keep all of your data files, notes, and homowork code in one (organized) place on your computer.\n\nGuide to RStudio IDE and R Projects\nWatch this video for a description of the layout of the RStudio interface and a demonstration for how to create an R project on your computer.\n\n\n\nMaking a BIOST 2041 folder and R Project\nI will be making a folder and project for this class where I will keep all of my notes and data sets. If you structure your folder the same way I do, all of my code should work seamlessly on your computer!\n\n\nHave you created a folder (directory) and an R project for BIOST 2041 on your computer?\n\n\n\n\n ✓Yes!\n\n\n ✗No\n\n\n\n\n\n\nI also like to keep things organized into sub-folders. For my BIOST 2041 folder, I have the following sub-folders:\n\nDatasets\nLabs\nNotes\nRecitations\n\nI keep all data files for the class in “Datasets” and then files with code and instructions in their corresponding assignment section.\nThat’s it! The next tutorial will be about using data types, using functions, and downloading packages in R."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Intro Biostatistics Resources",
    "section": "",
    "text": "software\n\n\ncode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Tutorial-2/Tutorial2.html",
    "href": "posts/Tutorial-2/Tutorial2.html",
    "title": "Tutorial 2: R Objects, Functions, and Packages",
    "section": "",
    "text": "In this tutorial, you will learn about working with objects in R. In particular, this tutorial will cover…\n\nR objects\nData types in R\nFunctions in R\nInstalling and using R packages\n\n\n\n\n\nIn this tutorial I will introduce a handful of new concepts in R and example code to demonstrate how the code works. When you get to a code chunk (an example of a code chunk is shown below), you can edit the code in the chunk if there are instructions to do so, and run the code to see what the output is by either hitting the “run code” button or by placing your cursor in the code chunk you want to execute and hitting command (⌘) + return (↩︎) (on mac) or Ctrl + Enter (on windows).\n\n\n\nEach code chunk has a  button in the upper right corner that allows you to reset the code.If you make a mistake and want to start from scratch, hit this button!\n\n\n\nYou may notice some lines of code that start with the pound sybmol, #, and show up in a different color. These are called comments. R doesn’t execute anything when it sees a comment, it’s just a note to yourself or anyone else reading your code! It’s good practice to add comments to your code at each line to help you remember what the code was meant to do, or to help someone else who is reading your code see what you were trying to do.\n\n# this is an example of a comment!\n\nExercise: Try writing your own comment in the code chunk below!\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nThink about what the line of code should start with.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "posts/Tutorial-2/Tutorial2.html#introduction",
    "href": "posts/Tutorial-2/Tutorial2.html#introduction",
    "title": "Tutorial 2: R Objects, Functions, and Packages",
    "section": "",
    "text": "In this tutorial, you will learn about working with objects in R. In particular, this tutorial will cover…\n\nR objects\nData types in R\nFunctions in R\nInstalling and using R packages\n\n\n\n\n\nIn this tutorial I will introduce a handful of new concepts in R and example code to demonstrate how the code works. When you get to a code chunk (an example of a code chunk is shown below), you can edit the code in the chunk if there are instructions to do so, and run the code to see what the output is by either hitting the “run code” button or by placing your cursor in the code chunk you want to execute and hitting command (⌘) + return (↩︎) (on mac) or Ctrl + Enter (on windows).\n\n\n\nEach code chunk has a  button in the upper right corner that allows you to reset the code.If you make a mistake and want to start from scratch, hit this button!\n\n\n\nYou may notice some lines of code that start with the pound sybmol, #, and show up in a different color. These are called comments. R doesn’t execute anything when it sees a comment, it’s just a note to yourself or anyone else reading your code! It’s good practice to add comments to your code at each line to help you remember what the code was meant to do, or to help someone else who is reading your code see what you were trying to do.\n\n# this is an example of a comment!\n\nExercise: Try writing your own comment in the code chunk below!\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nThink about what the line of code should start with.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "posts/Tutorial-2/Tutorial2.html#r-objects",
    "href": "posts/Tutorial-2/Tutorial2.html#r-objects",
    "title": "Tutorial 2: R Objects, Functions, and Packages",
    "section": "R objects",
    "text": "R objects\nThe console in R (the bottom quadrant of the RStudio interface) can be used essentially as a calculator. We can do lots of operations in the console and have R print out the answer for us.\nFor example, if we want to check what 2+3 is, we can run the code:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWhen you run the code above, it prints out the number 5. That’s great, but maybe I don’t want to have to type that every time I want to use those numbers. This is where R objects come in. For example, maybe I have a variable that I want to call x that will hold the number 2 and a different variable called y that will hold the number 3. I can do this with the following code\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nNote: = vs &lt;-\n\n\n\n\n\nSometimes you might see the operator &lt;- (for example x &lt;- 2) instead of the equals sign (=). This is an artifact of earlier versions of R when you had to use &lt;- to assign values to objects; both work now and = is shorter so I used it here :)\n\n\n\nNote that when you run this code, nothing happens! Or at least, that’s what it looks like. If we were running this in RStudio, we would see in the upper right quadrant under the “Environment” tab that we now have two objects, x and y, that have the values 2 and 3 respectively. To see this here, we can print out the values:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nCool! Now that x and y are placeholders for the numbers 2 and 3, we can use them just like numbers. For example, we can add them together, multiply them, divide, subtract, etc. If we want to save the value of x + y for later use, we can do that too!\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "posts/Tutorial-2/Tutorial2.html#types-of-data",
    "href": "posts/Tutorial-2/Tutorial2.html#types-of-data",
    "title": "Tutorial 2: R Objects, Functions, and Packages",
    "section": "Types of Data",
    "text": "Types of Data\nIn the example above, we were using numeric variables. However, there are many different types of data in R. Some of the main types of data we will use are\n\nnumeric: numbers\ncharacter: character strings/words\nfactor: categorical variables that store data in levels\nlogical: binary TRUE/FALSE\nNA: stand-in for missing values\n\n\nNumeric\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nCharacter\nThis is a number so we can use the same types of functions as we used above on the object x_numeric (adding, subtracting, etc.).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThis is a character. Even though it looks like a number, the quotation marks tell R that we don’t want to treat this as the number 5. For example, maybe this is and identifier for hospital number 5 in a study. In this case, we probably don’t want to do typical calculations as if this was the number 5.\nExercise: See what happens when you try to multiply x_character by 2.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nError messages\nOh no! You should see the following error message:\n\nError: non-numeric argument to binary operator\n\nThis is how R is telling you that you’re trying to apply a function that requires a number to an object that isn’t a number. R gives helpful error messages like this when you try to run code that doesn’t work. Sometimes the language R uses is hard to understand, but you can always ask me or a TA what the error means, or search the error on Google!\nExercise: If you change x_character to x_numeric in the code above, you should see it works just fine!\n\n\nFactor\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere we can see that x_factor is a factor variable. It may not be obvious why this is useful yet, but it should hopefully become clear as the semester goes on. Factors are essentially a way that you can pick the order that categorical variable levels are presented and give the variables nice names for things like printing in a plot.\n\n\nLogical\nR has another type of data called “logical” values. These are binary TRUE/FALSE (can also abbreviate with T/F) that let you know if a statement is true or false. This can be really useful when we want to filter data. For example, if we want to filter data to everyone over the age of 50, we can check the logical variables to check if age is greater than or equal to 50.\nIn the example below we’ll make a new variable to tell us if x_numeric from above is equal to the number 5.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nExercise: Try changing the value in the code above to check if x_numeric is equal to the number 4 to see how the value would change.\n\n\nMissing Values\nR has a special way of denoting missing values. In R, these show up as NA values. For example, if you have a data set with 100 individuals’ height, weight, and age, if you weren’t able to get the values measured for some of the individuals, those values should show up as NA values to indicate that they are missing.\nNote: this is different from “NA” the character. R will change the color of NA when you type it in your code to show that this is a special kind of variable.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nExercise: Try multiplying the x_missing variable by 2 and see what happens.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nGenerally any kind of functions applied to missing values return another NA value unless the function has a special way of handling missing values."
  },
  {
    "objectID": "posts/Tutorial-2/Tutorial2.html#vectors",
    "href": "posts/Tutorial-2/Tutorial2.html#vectors",
    "title": "Tutorial 2: R Objects, Functions, and Packages",
    "section": "Vectors",
    "text": "Vectors\nWe don’t have to save values in R individually. We can also save a bunch of values (numbers, characters, factors, etc.) together in something called a vector.\nWe can make these types of objects in R using the c() function (this stands for “concatenate”) to put a bunch of values together in a vector.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe can do lots of fun stuff in R with vectors. For example, we can multiply every entry of the vector by 2 (if all of the entries are numeric), taking the mean, sum, or standard deviation of a numeric vector, show the unique entries of the vector, and much more!\n\nMultiply by 2\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nTake the mean\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nTake the sum\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nTake the standard deviation\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nShow the unique values\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPrint the length of the vector\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "posts/Tutorial-2/Tutorial2.html#functions",
    "href": "posts/Tutorial-2/Tutorial2.html#functions",
    "title": "Tutorial 2: R Objects, Functions, and Packages",
    "section": "Functions",
    "text": "Functions\nWe’ve already shown some examples of functions in R. You can think of R functions kind of like a recipe. You need to tell R what dish you want to make (the function) and give it some ingredients (called arguments), and then R will make the dish for you!\nFunctions in R all using the same syntax:\n\nfunction_name(argument1 , argument2 , ...)\n\nwhere here the name of the function is function_name and the arguments for the function are passed to the function inside a set of parentheses.\nFor example, the mean() function we used above is a built-in R function that takes a vector of numbers (it can also take a vector of logical values or some more advanced data types like dates) and returns the mean (average) value by adding up all of the entries in the vector and dividing by the length. Functions in R are really helpful because it means we don’t have to write out the full code ourselves.\nFor example, both lines of code below do the same thing, but one is a lot easier (imagine if the vector had been even longer)!\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "posts/Tutorial-2/Tutorial2.html#r-packages",
    "href": "posts/Tutorial-2/Tutorial2.html#r-packages",
    "title": "Tutorial 2: R Objects, Functions, and Packages",
    "section": "R Packages",
    "text": "R Packages\n\nWhat is an R package\nR comes with a lot of great built-in, ready-to-use functions, but there are probably lots of other functions that we might want to use that don’t come built in to R. You can write your own functions in R if you want, but usually someone else has already written the kind of function you want to use. This is where R packages come in.\nThe following description of R packages comes from this R Basics Tutorial from R-Ladies Sydney.\n\nA package is a bundle of code that a generous person has written, tested, and then given away. Most of the time packages are designed to solve a specific problem, so they to pull together functions related to a particular data science problem (e.g., data wrangling, visualisation, inference). Anyone can write a package, and you can get packages from lots of different places, but for beginners the best thing to do is get packages from CRAN, the Comprehensive R Archive Network. It’s easier than any of the alternatives, and people tend to wait until their package is stable before submitting it to CRAN, so you’re less likely to run into problems. You can find a list of all the packages on CRAN here.\n\n\n\nHow to install R packages\n\n\n\nTest your knowledge\n\n\nLoading Packages\nJust because you installed an R package once, doesn’t mean you want to use it for every task you do in R. Because of this, R will automatically load a small set of default packages when you launch a new session, but you’ll need to tell it if you want to use any additional packages. To load a library that isn’t loaded by default, we use\n\nlibrary(package_name)\n\n\n\n\n\n\n\nNote: loading packages\n\n\n\n\n\nAnother reason we don’t automatically load all of the packages we’ve ever installed on our computer is because sometimes different packages have functions that are named the same thing (this is because R is open-source)! When this happens, it can be frustrating to try to figure out which version of the function R is using and requires extra code to tell R which version of the function you want to use. To avoid this it is best practice to only load the packages you currently need.\n\n\n\n\n\n\n\n\n\nLoading uninstalled packages\n\n\n\n\n\nRemember that you have to install an R package once before you ever use it. After you’ve installed it once, you don’t need to re-install it, you just need to load it into your session to have access to its contents.\nIf you ever run a line of code like this:\n\nlibrary(mypackage)\n\nand get an error message like this:\n\nError in library(mypackage) : there is no package called ‘mypackage’\n\nthis means you are trying to load a package you haven’t installed yet and you need to run install.packages(\"mypackage\") once first.\n\n\n\n\n\nThe tidyverse package\nThe R tidyverse package is a very useful suite of packages that make data manipulation and visualization clean and efficient. To see all of the packages included in the tidyverse package run the following code:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nThis should produce an error when you first try to run it. Can you tell why?\n\n\n\n\n\nError message\nOh no! We got another error message. You should see the following error:\n\nError: could not find function “tidyverse_packages”\n\nThis is R’s way of telling you that you’re trying to use a function that it doesn’t have access to. The tidyverse_packages() function comes from the tidyverse package. Even if you have the tidyverse installed on your computer, that doesn’t mean you have it loaded for R to use.\nTo give ourselves access to the functions from the tidyverse package, let’s add the line of code library(tidyverse) before the line of code in the chunk above. That should fix the problem.\nExercise: Add the line of code library(tidyverse) before the line of code in the chunk above and try rerunning the code chunk.\n\n\nThe pipe operator from the tidyverse\nOne of the unique functions provided by the tidyverse is called the “pipe operator.” The pipe operator looks like this: %&gt;%. The pipe operator is a way of stringing together a bunch of functions and the purpose is to make your code easier to read.\n\n\n\n\n\n\nNote: %&gt;% vs |&gt;\n\n\n\n\n\nRecent updates to R also let you use |&gt; as the pipe operator, but I’m old so I still use %&gt;% :)\n\n\n\nTo see an example of this, consider the following task:\nWe want to know how many unique values are contained in the vector x_vector.\nTo do this, we can start by having R grab the unique values in x_vector using unique(x_vector).This will give us a vector of the unique values in x_vector. Then, we can print the length of the output of unique(x_vector) to get the number of unique values.\nTo do this, we could define a new intermediate vector called x_unique to hold the vector of unique values in x_vector, or we can just use multiple functions simulatneously by nesting the parentheses:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNotice how the order of operations was:\n\nStart with your input x_vector\nDetermine the unique values of x_vector\nCalculate length of unique(x_vector)\n\nHowever, reading left-to-right we see the last step first. This can get particularly confusing when we want to apply multiple sequential functions to the same object in R. Imagine we had wanted to do 3 more functions! This would have read as:\n\nfunction3(function2(function1(length(unique(x_vector)))))\n\nThat’s a lot of parentheses and it’s hard to even figure out where the operation starts!\nTo fix this, we can use the pipe operator:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nSee how the output is the same but the order of operations is much clearer in this example? It’s clear that we start with the object x_vector, which we then extract just the unique values from, then finally calculate the length of just the vector of unique values.\nIn the example above with an extra 3 functions at the end, this would read as:\n\nx_vector %&gt;% unique() %&gt;% length() %&gt;% function1() %&gt;% function2()  %&gt;% function3()\n\nStill long, but a lot easier to follow (at least I think so)!"
  },
  {
    "objectID": "posts/Tutorial-2/Tutorial2.html#end-of-tutorial",
    "href": "posts/Tutorial-2/Tutorial2.html#end-of-tutorial",
    "title": "Tutorial 2: R Objects, Functions, and Packages",
    "section": "End of tutorial",
    "text": "End of tutorial\nThat’s it! The next tutorial will be about reading in and manipulating data in R."
  },
  {
    "objectID": "index.html#biost-2041",
    "href": "index.html#biost-2041",
    "title": "BIOST2041",
    "section": "",
    "text": "Resources for learning R"
  },
  {
    "objectID": "posts/Tutorial-3/Tutorial3.html",
    "href": "posts/Tutorial-3/Tutorial3.html",
    "title": "Tutorial 3: Importing and Manipulating Data in R",
    "section": "",
    "text": "In this tutorial, you will learn about working with data in R. In particular, this tutorial will cover…\n\nReading in data from different file types\nData frame structure in R\nUpdating and making new variables\nFiltering data"
  },
  {
    "objectID": "posts/Tutorial-3/Tutorial3.html#introduction",
    "href": "posts/Tutorial-3/Tutorial3.html#introduction",
    "title": "Tutorial 3: Importing and Manipulating Data in R",
    "section": "Introduction",
    "text": "Introduction\nIn this tutorial, you will learn about working with data in R. In particular, this tutorial will cover…\n\nReading in data from different file types\nData frame structure in R\nUpdating and making new variables\nFiltering data"
  },
  {
    "objectID": "posts/Tutorial-3/Tutorial3.html#files-on-your-local-computer",
    "href": "posts/Tutorial-3/Tutorial3.html#files-on-your-local-computer",
    "title": "Tutorial 3: Importing and Manipulating Data in R",
    "section": "Files on your local computer",
    "text": "Files on your local computer\nWhen you are working in R on your local computer and you want to import a data file into your R session for an analysis, you will need to tell R where it can find the data file. This is why I suggested creating a ‘data’ folder in your class folder. If you save all of the data files for this class in that folder, you can always use the same general syntax for telling R where your file is.\nFor this tutorial, we are working on the web, so R doesn’t have access to the local files on your device. I have included all of the data files we will be using in this tutorial on a webpage that we can access online. You may need to change this code slightly to when running code for your assignments in this class to work with your computer’s file structure.\n\nChecking your working directory\nOne good idea when you start working on a new analysis is to make sure you know where within your computer’s file structure you are working so you can figure out how to access various files.\nWe can use the function getwd() to have R print out the path to the directory (folder) we are currently working in.\nTry running the code in this block:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nYou should see the output is\n\n“/home/web_user”\n\nThis is because we are working in R on the web. This is telling us that we are in a subdirectory of the “home” directory called “web_user”. That is, “web_user” is a directory (folder) inside the larger directory (folder) called “home”. You read file paths from left to right\nTry running this in your Console in RStudio on your computer, and you should see a file path that corresponds to the file structure on your computer.\n\n\nList files in working directory\nTo check the files that are present in our current directory, we can use the function list.files() to list out all of the files that are stored in the directory where we are currently working.\nTry running the code in this block:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThe output should look something like this:\n\n[1] “Rplots.pdf” “cdc.samp.csv” “census.rda” “dds.xlsx”\n\nThis tells us that there are 4 files that we have access to in this directory:\n\na file called “cdc.samp.csv”\na file called “census.rda”\na file called “dds.xlsx”\n\nThere are the data files that we will be working with in this tutorial."
  },
  {
    "objectID": "posts/Tutorial-3/Tutorial3.html#types-of-files",
    "href": "posts/Tutorial-3/Tutorial3.html#types-of-files",
    "title": "Tutorial 3: Importing and Manipulating Data in R",
    "section": "Types of files",
    "text": "Types of files\nThe main types of files that we will work with in this class are:\n\n\n\n\nFile Type\n\n\nDescription\n\n\nFile Extension\n\n\n\n\nCSV files\n\n\nThis stands for “comma separated value”. These are files that have rows with entries separated by commas to indicate the different columns\n\n\n.csv\n\n\n\n\nExcel files\n\n\nFiles in Excel workbook/sheet format\n\n\n.xls or .xlsx\n\n\n\n\nR data files\n\n\nFiles with saved R objects\n\n\n.RData or .rda\n\n\n\nThe three files we will read in today have the following names:\n\n“cdc.samp.csv” : a csv file with demographic data from the cdc\n“dds.xlsx” : an excel file with data from the department of disability services in California\n“census.rda”: an R data file with data from the US census"
  },
  {
    "objectID": "posts/Tutorial-3/Tutorial3.html#data",
    "href": "posts/Tutorial-3/Tutorial3.html#data",
    "title": "Tutorial 3: Importing and Manipulating Data in R",
    "section": "Data",
    "text": "Data\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "posts/Tutorial-3/Tutorial3.html#importing-data",
    "href": "posts/Tutorial-3/Tutorial3.html#importing-data",
    "title": "Tutorial 3: Importing and Manipulating Data in R",
    "section": "Importing Data",
    "text": "Importing Data\n\nReading in a csv file\nTo read in a csv file to R, we use the function read.csv(). There is a similar function in the tidyverse package called read_csv() that you could also use. We’ll go ahead and use the tidyverse version.\nThe syntax to use this function is:\n\nname_for_data = read_csv(\"path_to_data\")\n\n\nHere name_for_data is any name you choose to call the data frame. It can be helpful to give it a name that is relevant to the data, but you can call it whatever you want (with some limits, for example the name can’t start with a number).\n\"path_to_data\" is the file path that will tell R where to look for your data. You will see more examples of this in class, but for this example, the files are in our working directory so we don’t need any long file paths to navigate through different directories.\n\n\n\n\n\n\n\nAssigning a name\n\n\n\nWarning: Naming the object is very important!\nIf you forget to choose a name for your dataframe, R will read in the data and print it, but it won’t save it as an object. If you just use read_csv() without the name_for_data = part, you won’t be able to manipulate or analyze the data\n\n\n\n\n\n\n\n\nDuplicate names\n\n\n\nAnother warning: If you read in two datasets and accidentally give them the same name, the one you run second will overwrite the first one! Sometimes this is useful; for example, if you just want to make a change to a dataset (more on this later). But be careful and when in doubt, give new dataframes different names!\n\n\nLet’s try reading in the “cdc.samp.csv” file and give the dataframe the name cdc.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint (if you get an error)\n\n\n\n\n\nIf you get the following error:\n\nError: could not find function “read_csv”\n\nyou forgot to load the tidyverse package!\nAdd a line of code above your read_csv() line to load the tidyverse (library(tidyverse)).\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nViewing your data\nGreat! We’ve now read our first data file into R. But how do we know if it worked?\nWe’re going to take a brief detour to talk about taking a first look at your data before we move on to importing data from other files types.\n\nThe head() function\nIn RStudio, you should be able to see a new object in your ‘Environment’ tab in the upper-right quadrant of your screen when you import a new data set. Since we’re working on the web, we’ll go ahead and use a different function to take a look at the top few rows of the dataset. The function that will allow us to do this is head() that shows us the top few entries of a data frame, vector, or list.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint (if you get an error)\n\n\n\n\n\nIf you get the following error:\n\nError: object ‘cdc’ not found\n\nthis is R’s way of telling you that you don’t currently have an object loaded into your environment called ‘cdc’.\nWhen you see an error like this, you should make sure the code used to import the data worked properly and that you don’t have any spelling errors (R is case sensitive so you have to be very careful to spell things exactly correctly).\nMake sure you were able to successfully run the code above with the read_csv() function without any errors before running this code block.\n\n\n\nAwesome! Here we see the top 6 rows of the cdc dataframe. There are 9 columns:  genhlth, exerany, hlthplan, smoke100, height, weight, wtdesire, age, gender.\n\n\nThe skim() function\nAnother way we can start to take a look at the data is to use a function from the R package skmir. The function is called skim and gives us a nice overview of the contents included in our data.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThis function breaks our columns into groups based on the type of variable they are. Here we see that  genhlth and  gender are characters and the rest are being treated as numeric (even though it looks like we may have a few other binary variables that were coded as 0/1—more on this later). The summary information gives us a snapshot of the contents of each column in the data. More information about the specific sections of the output can be found below.\n\n\n\n\n\n\nUnderstanding skim() output\n\n\n\n\n\nThe columns for categorical variables are:\n\n\n\nAttribute\n\n\nDescription\n\n\n\n\nn_missing\n\n\nthe number of rows with missing value (NA) in the corresponding columns\n\n\n\n\ncomplete_rate\n\n\nproportion of rows that are not missing (not NAs)\n\n\n\n\nmin\n\n\nthe minimum character length of values in the column\n\n\n\n\nmax\n\n\nthe maximum character length of values in the column\n\n\n\n\nempty\n\n\nthe number of empty characters in the column\n\n\n\n\nn_unique\n\n\nthe number of unique values in the column\n\n\n\n\nwhitespace\n\n\nthe number of rows containing only white space in the column\n\n\n\nThe columns for numeric variables are:\n\n\n\nAttribute\n\n\nDescription\n\n\n\n\nn_missing\n\n\nthe number of rows with missing value (NA) in the corresponding columns\n\n\n\n\ncomplete_rate\n\n\nproportion of rows that are not missing (not NAs)\n\n\n\n\nmean\n\n\nthe mean (average) value of the non-missing values in the column\n\n\n\n\nsd\n\n\nthe standard deviation of the non-missing values in the column\n\n\n\n\np0\n\n\nthe minimum value observed in the column\n\n\n\n\np25\n\n\nthe 25th percentile of values observed in the column\n\n\n\n\np50\n\n\nthe median (50th percentile) of values observed in the column\n\n\n\n\np75\n\n\nthe 75th percentile of values observed in the column\n\n\n\n\np100\n\n\nthe maximum value observed in the column\n\n\n\n\nhist\n\n\na histogram showing the shape of the distribution of values in the column\n\n\n\n\n\n\nBack to reading in data from various file types…\n\n\n\nReading in an Excel file\nWe’ve successfully read in a csv file, but what if we get a different file type? For example, a lot of people store data in Excel. Can R handle those files? Yep! But we’re going to need to use a new package called the readxl package.\n\n\n\n\n\n\nReminder: Installing readxl\n\n\n\n\n\nRemember that if you don’t have this package installed on your local computer, you’ll need to install it before you can load and use it. I’ve already installed it here, but remember that to install the package you can just run install.packages(\"readxl\") in your console in R Studio.\n\n\n\nOnce we have the readxl package loaded, the syntax is very similar to read_csv() from above. There are a few different functions that could work from this package, but the most generic one is read_excel(). The syntax is:\n\nname_for_data = read_excel(\"path_to_data\")\n\nLet’s try it using our ‘dds.xlsx’ file!\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAwesome! We can see that there are 6 columns in this data set:  id, age.cohort, age, gender, expenditure, ethnicity.\nOnce you have the readxl package, importing Excel files works just like reading in csv files!\n\n\nImporting R data files\nThere is one other type of file that we will use from time to time in this class. This is a special kind of file called an R data file that saves R objects. The syntax is slightly different for these kinds of files.\nThe syntax for importing an R data file is:\n\nload(\"path_to_data\")\n\n\n\n\n\n\n\nload()\n\n\n\nNotice how we didn’t include anything on the left side of the load() function here. We didn’t give the data a name!\n\n\nThe reason we don’t assign names to data loaded from an R data file is because these objects already come with a name. Since these are R objects that were saved specifically in a file format that R understands, they keep the name that they were given when they were first created in R. So how do we know what the name is? We can add an extra argument to this function called verbose. The syntax will become:\n\nload(\"path_to_data\", verbose = TRUE)\n\nThis tells R to print out the name of the data object once it is loaded so we know what to call it.\nLet’s see an example of this using our ‘census.rda’ file.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe can see the message:\n\nLoading objects:  census"
  },
  {
    "objectID": "posts/Tutorial-3/Tutorial3.html#getting-set-up",
    "href": "posts/Tutorial-3/Tutorial3.html#getting-set-up",
    "title": "Tutorial 3: Importing and Manipulating Data in R",
    "section": "Getting Set Up",
    "text": "Getting Set Up\n\nFiles on your local computer\nWhen you are working in R on your local computer and you want to import a data file into your R session for an analysis, you will need to tell R where it can find the data file. This is why I suggested creating a ‘data’ folder in your class folder. If you save all of the data files for this class in that folder, you can always use the same general syntax for telling R where your file is.\nFor this tutorial, we are working on the web, so R doesn’t have access to the local files on your device. I have included all of the data files we will be using in this tutorial on a webpage that we can access online. You may need to change this code slightly to when running code for your assignments in this class to work with your computer’s file structure.\n\n\nChecking your working directory\nOne good idea when you start working on a new analysis is to make sure you know where within your computer’s file structure you are working so you can figure out how to access various files.\nWe can use the function getwd() to have R print out the path to the directory (folder) we are currently working in.\nTry running the code in this block:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nYou should see the output is\n\n\"/home/web_user\"\n\nThis is because we are working in R on the web. This is telling us that we are in a sub-directory of the “home” directory called “web_user”. That is, “web_user” is a directory (folder) inside the larger directory (folder) called “home”. You read file paths from left to right\nTry running this in your Console in RStudio on your computer, and you should see a file path that corresponds to the file structure on your computer.\n\n\nList files in working directory\nTo check the files that are present in our current directory, we can use the function list.files() to list out all of the files that are stored in the directory where we are currently working.\nTry running the code in this block:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThe output should look something like this:\n\n[1] “cdc.samp.csv” “census.rda” “dds.xlsx”\n\nThis tells us that there are 4 files that we have access to in this directory:\n\na file called “cdc.samp.csv”\na file called “census.rda”\na file called “dds.xlsx”\n\nThere are the data files that we will be working with in this tutorial."
  },
  {
    "objectID": "posts/Tutorial-3/Tutorial3.html#view-your-data",
    "href": "posts/Tutorial-3/Tutorial3.html#view-your-data",
    "title": "Tutorial 3: Importing and Manipulating Data in R",
    "section": "View your data",
    "text": "View your data\nGreat! We’ve now read our first data file into R. But how do we know if it worked?\n\nThe head() function\nIn RStudio, you should be able to see a new object in your ‘Environment’ tab in the upper-right quadrant of your screen when you import a new data set. Since we’re working on the web, we’ll go ahead and use a different function to take a look at the top few rows of the dataset. The function that will allow us to do this is head() that shows us the top few entries of a data frame, vector, or list.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint (if you get an error)\n\n\n\n\n\nIf you get the following error:\n\nError: object ‘cdc’ not found\n\nthis is R’s way of telling you that you don’t currently have an object loaded into your environment called ‘cdc’.\nWhen you see an error like this, you should make sure the code used to import the data worked properly and that you don’t have any spelling errors (R is case sensitive so you have to be very careful to spell things exactly correctly).\nMake sure you were able to successfully run the code above with the read_csv() function without any errors before running this code block.\n\n\n\nAwesome! Here we see the top 6 rows of the cdc dataframe. There are 9 columns:  genhlth, exerany, hlthplan, smoke100, height, weight, wtdesire, age, gender.\n\n\nThe skim() function\nAnother way we can start to take a look at the data is to use a function from the R package skmir. The function is called skim and gives us a nice overview of the contents included in our data.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThis function breaks our columns into groups based on the type of variable they are. Here we see that  genhlth and  gender are characters and the rest are being treated as numeric (even though it looks like we may have a few other binary variables that were coded as 0/1—more on this later).\nThe columns for categorical variables are:\n\n\n\nAttribute\n\n\nDescription\n\n\n\n\nn_missing\n\n\nthe number of rows with missing value (NA) in the corresponding columns\n\n\n\n\ncomplete_rate\n\n\nproportion of rows that are not missing (not NAs)\n\n\n\n\nmin\n\n\nthe minimum character length of values in the column\n\n\n\n\nmax\n\n\nthe maximum character length of values in the column\n\n\n\n\nempty\n\n\nthe number of empty characters in the column\n\n\n\n\nn_unique\n\n\nthe number of unique values in the column\n\n\n\n\nwhitespace\n\n\nthe number of rows containing only white space in the column\n\n\n\nThe columns for numeric variables are:\n\n\n\nAttribute\n\n\nDescription\n\n\n\n\nn_missing\n\n\nthe number of rows with missing value (NA) in the corresponding columns\n\n\n\n\ncomplete_rate\n\n\nproportion of rows that are not missing (not NAs)\n\n\n\n\nmean\n\n\nthe mean (average) value of the non-missing values in the column\n\n\n\n\nsd\n\n\nthe standard deviation of the non-missing values in the column\n\n\n\n\np0\n\n\nthe minimum value observed in the column\n\n\n\n\np25\n\n\nthe 25th percentile of values observed in the column\n\n\n\n\np50\n\n\nthe median (50th percentile) of values observed in the column\n\n\n\n\np75\n\n\nthe 75th percentile of values observed in the column\n\n\n\n\np100\n\n\nthe maximum value observed in the column\n\n\n\n\nhist\n\n\na histogram showing the shape of the distribution of values in the column"
  },
  {
    "objectID": "posts/Tutorial-3/Tutorial3.html#viewing-your-data",
    "href": "posts/Tutorial-3/Tutorial3.html#viewing-your-data",
    "title": "Tutorial 3: Importing and Manipulating Data in R",
    "section": "Viewing your data",
    "text": "Viewing your data\nGreat! We’ve now read our first data file into R. But how do we know if it worked?\nWe’re going to take a brief detour to talk about taking a first look at your data before we move on to importing data from other files types.\n\nThe head() function\nIn RStudio, you should be able to see a new object in your ‘Environment’ tab in the upper-right quadrant of your screen when you import a new data set. Since we’re working on the web, we’ll go ahead and use a different function to take a look at the top few rows of the dataset. The function that will allow us to do this is head() that shows us the top few entries of a data frame, vector, or list.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint (if you get an error)\n\n\n\n\n\nIf you get the following error:\n\nError: object ‘cdc’ not found\n\nthis is R’s way of telling you that you don’t currently have an object loaded into your environment called ‘cdc’.\nWhen you see an error like this, you should make sure the code used to import the data worked properly and that you don’t have any spelling errors (R is case sensitive so you have to be very careful to spell things exactly correctly).\nMake sure you were able to successfully run the code above with the read_csv() function without any errors before running this code block.\n\n\n\nAwesome! Here we see the top 6 rows of the cdc dataframe. There are 9 columns:  genhlth, exerany, hlthplan, smoke100, height, weight, wtdesire, age, gender.\n\n\nThe skim() function\nAnother way we can start to take a look at the data is to use a function from the R package skmir. The function is called skim and gives us a nice overview of the contents included in our data.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThis function breaks our columns into groups based on the type of variable they are. Here we see that  genhlth and  gender are characters and the rest are being treated as numeric (even though it looks like we may have a few other binary variables that were coded as 0/1—more on this later). The summary information gives us a snapshot of the contents of each column in the data. More information about the specific sections of the output can be found below.\n\n\n\n\n\n\nUnderstanding skim() output\n\n\n\n\n\nThe columns for categorical variables are:\n\n\n\nAttribute\n\n\nDescription\n\n\n\n\nn_missing\n\n\nthe number of rows with missing value (NA) in the corresponding columns\n\n\n\n\ncomplete_rate\n\n\nproportion of rows that are not missing (not NAs)\n\n\n\n\nmin\n\n\nthe minimum character length of values in the column\n\n\n\n\nmax\n\n\nthe maximum character length of values in the column\n\n\n\n\nempty\n\n\nthe number of empty characters in the column\n\n\n\n\nn_unique\n\n\nthe number of unique values in the column\n\n\n\n\nwhitespace\n\n\nthe number of rows containing only white space in the column\n\n\n\nThe columns for numeric variables are:\n\n\n\nAttribute\n\n\nDescription\n\n\n\n\nn_missing\n\n\nthe number of rows with missing value (NA) in the corresponding columns\n\n\n\n\ncomplete_rate\n\n\nproportion of rows that are not missing (not NAs)\n\n\n\n\nmean\n\n\nthe mean (average) value of the non-missing values in the column\n\n\n\n\nsd\n\n\nthe standard deviation of the non-missing values in the column\n\n\n\n\np0\n\n\nthe minimum value observed in the column\n\n\n\n\np25\n\n\nthe 25th percentile of values observed in the column\n\n\n\n\np50\n\n\nthe median (50th percentile) of values observed in the column\n\n\n\n\np75\n\n\nthe 75th percentile of values observed in the column\n\n\n\n\np100\n\n\nthe maximum value observed in the column\n\n\n\n\nhist\n\n\na histogram showing the shape of the distribution of values in the column\n\n\n\n\n\n\nBack to reading in data from various file types…"
  },
  {
    "objectID": "posts/Tutorial-3/Tutorial3.html#reading-in-an-excel-file",
    "href": "posts/Tutorial-3/Tutorial3.html#reading-in-an-excel-file",
    "title": "Tutorial 3: Importing and Manipulating Data in R",
    "section": "Reading in an Excel file",
    "text": "Reading in an Excel file\nWe’ve successfully read in a csv file, but what if we get a different file type? For example, a lot of people store data in Excel. Can R handle those files? Yep! But we’re going to need to use a new package called the readxl package.\n\n\n\n\n\n\nReminder: Installing readxl\n\n\n\n\n\nRemember that if you don’t have this package installed on your local computer, you’ll need to install it before you can load and use it. I’ve already installed it here, but remember that to install the package you can just run install.packages(\"readxl\") in your console in R Studio.\n\n\n\nOnce we have the readxl package loaded, the syntax is very similar to read_csv() from above. There are a few different functions that could work from this package, but the most generic one is read_excel(). The syntax is:\n\nname_for_data = read_excel(\"path_to_data\")\n\nLet’s try it using our ‘dds.xlsx’ file!\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAwesome! We can see that there are 6 columns in this data set:  id, age.cohort, age, gender, expenditure, ethnicity.\nOnce you have the readxl package, importing Excel files works just like reading in csv files!"
  },
  {
    "objectID": "posts/Tutorial-3/Tutorial3.html#r-data-files",
    "href": "posts/Tutorial-3/Tutorial3.html#r-data-files",
    "title": "Tutorial 3: Importing and Manipulating Data in R",
    "section": "R data files",
    "text": "R data files\nThere is one other type of file that we will use from time to time in this class. This is a special kind of file called an R data file that saves R objects. The syntax is slightly different for these kinds of files.\nThe syntax for importing an R data file is:\n\nload(\"path_to_data\")\n\n\n\n\n\n\n\nload()\n\n\n\nNotice how we didn’t include anything on the left side of the load() function here. We didn’t give the data a name!\n\n\nThe reason we don’t assign names to data loaded from an R data file is because these objects already come with a name. Since these are R objects that were saved specifically in a file format that R understands, they keep the name that they were given when they were first created in R. So how do we know what the name is? We can add an extra argument to this function called verbose. The syntax will become:\n\nload(\"path_to_data\", verbose = TRUE)\n\nThis tells R to print out the name of the data object once it is loaded so we know what to call it.\nLet’s see an example of this using our ‘census.rda’ file.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe can see the message:\n\nLoading objects: census"
  },
  {
    "objectID": "posts/QQ_plot_shiny/QQshiny.html",
    "href": "posts/QQ_plot_shiny/QQshiny.html",
    "title": "QQ Plot Visualization Tool",
    "section": "",
    "text": "#| standalone: true\n#| viewerHeight: 600\n\nlibrary(shiny)\nlibrary(tidyverse)\n\n# Define UI for application that draws a histogram\nui &lt;- fluidPage(\n   \n   # Application title\n   titlePanel(\"QQ Plot Visualization\"),\n   \n      \n      # Show a plot of the generated distribution\n        tabsetPanel(type = \"tabs\",\n          tabPanel(\"Data-to-Normal Comparison\",\n                  sidebarLayout( \n                    sidebarPanel(\n                      radioButtons(\"skew\", \"Distribution\",\n                                 choices = c(\"Right Skew\",\n                                           \"Left Skew\",\n                                              \"Symmetric (light tails)\",\n                                              \"Symmetric (heavy tails)\",\n                                              \"Symmetric (Normal)\"),\n                                             selected = \"Symmetric (Normal)\"),\n                                checkboxInput(\"scaled\",\n                                              \"Scaled QQ-Plot\",\n                                              value = FALSE)\n                   ),\n                   mainPanel( plotOutput(\"dataPlot\",height = \"300px\"),\n                      plotOutput(\"quantPlot\",height = \"350px\"),\n                       plotOutput(\"qqPlot\")))),\n          tabPanel(\"Data-to-Data Comparison\",\n                   sidebarLayout( \n                     sidebarPanel(\n                          radioButtons(\"x1\", \"Sample 1 Distribution\",\n                                             choices = c(\"Right Skew\",\"Left Skew\",\n                                                         \"Symmetric (light tails)\",\n                                                         \"Symmetric (heavy tails)\",\n                                                         \"Symmetric (Normal)\"),\n                                             selected = \"Symmetric (Normal)\"),\n                                radioButtons(\"x2\", \"Sample 2 Distribution\",\n                                             choices = c(\"Right Skew\",\"Left Skew\",\n                                                         \"Symmetric (light tails)\",\n                                                         \"Symmetric (heavy tails)\",\n                                                         \"Symmetric (Normal)\"),\n                                             selected = \"Right Skew\"),\n                                sliderInput(\"VR\",\n                                            HTML(\"SD Ratio (&#963;&lt;sub&gt;2&lt;/sub&gt;/&#963;&lt;sub&gt;1&lt;/sub&gt;)\"),\n                                            min = 0.1, max = 2, value = 1,round=-1,ticks = F),\n                                sliderInput(\"means\",\n                                            HTML(\"Mean Shift (&#956;&lt;sub&gt;2&lt;/sub&gt;-&#956;&lt;sub&gt;1&lt;/sub&gt;)\"),\n                                            min = -2, max = 2, value = 0,step=.1,round=-1,ticks = F),\n                                \n                   ),\n                   mainPanel(\n                     plotOutput(\"dataPlot2\",height = \"300px\"),\n                   plotOutput(\"quantPlot2\",height = \"300px\"),\n                   plotOutput(\"qqPlot2\")))\n        )\n    \n      )\n)\n\n\n# Define server logic required to draw a histogram\nserver &lt;- function(input, output) {\n\n  set.seed(1234)\n  \n  vals&lt;-reactiveValues(x=NULL, quants=NULL, quants_t=NULL,m=NULL,s=NULL,x2=NULL)\n  \nobserveEvent({input$skew\n             input$scaled},{\n  if(input$skew == \"Left Skew\"){vals$x&lt;-rbeta(10000,5,1)\n  } else if(input$skew == \"Right Skew\"){vals$x&lt;-rbeta(10000,1,5)\n  } else if(input$skew == \"Symmetric (light tails)\"){vals$x&lt;-c(rnorm(5000,mean=-1.5),rnorm(5000,mean=1.5))\n  } else if (input$skew == \"Symmetric (heavy tails)\"){vals$x&lt;-c(rt(10000,df=4))\n  }else {vals$x&lt;-rnorm(10000,mean = 0, sd = 1)}\n\n  vals$quants=data.frame( q5 = quantile(vals$x,.05),\n                     q10 = quantile(vals$x,.1),\n                     q25 = quantile(vals$x,.25),\n                     q50 = quantile(vals$x,.5),\n                     q75 = quantile(vals$x,.75),\n                     q90 = quantile(vals$x,.9),\n                     q95 = quantile(vals$x,.95))%&gt;%\n    pivot_longer(1:7, names_to = \"quantile\",values_to=\"qx\")%&gt;%\n    mutate(type=\"Sample Data\")%&gt;%\n    mutate(quantile = factor(quantile,levels = paste0(\"q\",c(5,10,25,50,75,90,95))))\n\n  \n  if(input$scaled){\n    vals$m = 0\n    vals$s = 1\n    vals$quants_t=data.frame(q5 = qnorm(.05),\n                        q10 = qnorm(.1),\n                        q25 = qnorm(.25),\n                        q50 = qnorm(.5),\n                        q75 = qnorm(.75),\n                        q90 = qnorm(.9),\n                        q95 = qnorm(.95)\n    )%&gt;%\n      pivot_longer(1:7, names_to = \"quantile\",values_to=\"qx\")%&gt;%\n      mutate(type=\"Theoretical Normal\")%&gt;%\n      mutate(quantile = factor(quantile,levels = paste0(\"q\",c(5,10,25,50,75,90,95))))\n  } else {\n    vals$m = mean(vals$x)\n    vals$s = (quantile(vals$x,.75)-quantile(vals$x,.25))/(qnorm(.75)-qnorm(.25))\n    s=vals$s; m=vals$m\n    vals$quants_t=data.frame(q5 = qnorm(.05,mean=m,sd=s),\n                              q10 = qnorm(.1,mean=m,sd=s),\n                              q25 = qnorm(.25,mean=m,sd=s),\n                              q50 = qnorm(.5,mean=m,sd=s),\n                              q75 = qnorm(.75,mean=m,sd=s),\n                              q90 = qnorm(.9,mean=m,sd=s),\n                              q95 = qnorm(.95,mean=m,sd=s)\n  )%&gt;%\n    pivot_longer(1:7, names_to = \"quantile\",values_to=\"qx\")%&gt;%\n    mutate(type=\"Theoretical Normal\")%&gt;%\n    mutate(quantile = factor(quantile,levels = paste0(\"q\",c(5,10,25,50,75,90,95))))}\n})\n   \n   output$dataPlot &lt;- renderPlot({\n     data.frame(x=vals$x)%&gt;%\n       ggplot(aes(x=x))+\n       geom_histogram(aes(y = ..density..),\n                      fill=\"grey\",color = \"black\")+\n       geom_function(fun = function(x) dnorm(x, mean=mean(vals$x),sd=sd(vals$x)),color = \"blue\")+\n       theme_bw()+\n       labs(title=\"Sample Data\")+xlim(mean(vals$x)-4*sd(vals$x),mean(vals$x)+4*sd(vals$x))\n   })\n   \n   output$quantPlot &lt;- renderPlot({\n     p1=vals$quants%&gt;%\n       ggplot()+\n       geom_density(data = data.frame(x=vals$x),aes(x=x))+\n       theme_bw()+\n       labs(title = \"Smoothed Data with Quantiles\")+\n       geom_vline(aes(xintercept=qx,color = quantile),size=.4)+\n       theme(legend.position = \"none\")+xlim(mean(vals$x)-4*sd(vals$x),mean(vals$x)+4*sd(vals$x))\n     \n     if(input$scaled){min=-4; mx = 4;clr = \"darkred\"\n     }else{min =mean(vals$x)-4*sd(vals$x);mx = mean(vals$x)+4*sd(vals$x);clr=\"blue\" }\n     p2 = data.frame(x = seq(min(vals$x),max(vals$x),by=sd(vals$x)/20))%&gt;%\n       ggplot(aes(x=x))+\n       geom_function(fun = dnorm,args=list(mean=vals$m, sd=vals$s),color = clr)+\n       theme_bw()+\n       labs(title = \"Theoretical Normal Distribution\",y=\"density\")+\n       geom_vline(data=vals$quants_t,aes(xintercept=qx,color = quantile),size=.4)+\n       theme(legend.position = \"bottom\",legend.title = element_blank())+xlim(min,mx)\n     gridExtra::grid.arrange(p1,p2,nrow=2,heights=c(.85,1.1))\n   })\n\n  \n   output$qqPlot &lt;- renderPlot({\n     if(input$scaled){clr = \"darkred\"\n     }else{clr=\"blue\" }\n     data.frame(smp=vals$x)%&gt;%\n       ggplot()+\n       geom_qq(aes(sample=smp),\n               dparams = list(mean = vals$m, sd = vals$s))+\n       geom_qq_line(aes(sample=smp),\n                    dparams = list(mean = vals$m, sd = vals$s))+\n       geom_point(data = left_join(vals$quants%&gt;%rename(y=qx),vals$quants_t%&gt;%rename(x=qx),\n                                   by=\"quantile\")%&gt;%\n                    mutate(quantile = factor(quantile,levels = paste0(\"q\",c(5,10,25,50,75,90,95)))),\n                  aes(x=x,y=y,color = quantile),size=2)+\n       theme_bw()+\n       labs(x = \"Theoretical Quantiles\", y = \"Observed Quantiles\")+\n       theme(legend.position = \"bottom\",legend.title = element_blank(),axis.title.x = element_text(color = clr))\n     \n     \n     \n   })\n   vals2&lt;-reactiveValues(x1=NULL, x2= NULL, quants1=NULL, quants2=NULL)\n   \n   observeEvent({input$x1\n     input$x2\n     input$means\n     input$VR},{\n       if(input$x1 == \"Left Skew\"){vals2$x1&lt;-(rbeta(10000,5,1)-5/6)/sd(rbeta(10000,5,1))\n       } else if(input$x1 == \"Right Skew\"){vals2$x1&lt;-(rbeta(10000,1,5)-1/6)/sd(rbeta(10000,1,5))\n       } else if(input$x1 == \"Symmetric (light tails)\"){vals2$x1&lt;-c(rnorm(5000,mean=-1.5),rnorm(5000,mean=1.5))/1.8\n       } else if (input$x1 == \"Symmetric (heavy tails)\"){vals2$x1&lt;-c(rt(10000,df=4))/sd(rt(10000,df=4))\n       }else {vals2$x1&lt;-rnorm(10000,mean = 0, sd = 1)}\n\n\n       if(input$x2 == \"Left Skew\"){vals2$x2&lt;-(rbeta(10000,5,1)-5/6)/sd(rbeta(10000,5,1))\n       } else if(input$x2 == \"Right Skew\"){vals2$x2&lt;-(rbeta(10000,1,5)-1/6)/sd(rbeta(10000,1,5))\n       } else if(input$x2 == \"Symmetric (light tails)\"){vals2$x2&lt;-c(rnorm(5000,mean=-1.5),rnorm(5000,mean=1.5))/1.8\n       } else if (input$x2 == \"Symmetric (heavy tails)\"){vals2$x2&lt;-c(rt(10000,df=4))/sd(rt(10000,df=4))\n       }else {vals2$x2&lt;-rnorm(10000,mean = 0, sd = 1)}\n      \n       \n       vals2$x2 =vals2$x2*input$VR+input$means\n       \n       vals2$quants1=data.frame( q5 = quantile(vals2$x1,.05),\n                               q10 = quantile(vals2$x1,.1),\n                               q25 = quantile(vals2$x1,.25),\n                               q50 = quantile(vals2$x1,.5),\n                               q75 = quantile(vals2$x1,.75),\n                               q90 = quantile(vals2$x1,.9),\n                               q95 = quantile(vals2$x1,.95))%&gt;%\n         pivot_longer(1:7, names_to = \"quantile\",values_to=\"qx\")%&gt;%\n         mutate(type=\"Sample Data 1\")%&gt;%\n         mutate(quantile = factor(quantile,levels = paste0(\"q\",c(5,10,25,50,75,90,95))))\n       vals2$quants2=data.frame( q5 = quantile(vals2$x2,.05),\n                                 q10 = quantile(vals2$x2,.1),\n                                 q25 = quantile(vals2$x2,.25),\n                                 q50 = quantile(vals2$x2,.5),\n                                 q75 = quantile(vals2$x2,.75),\n                                 q90 = quantile(vals2$x2,.9),\n                                 q95 = quantile(vals2$x2,.95))%&gt;%\n         pivot_longer(1:7, names_to = \"quantile\",values_to=\"qx\")%&gt;%\n         mutate(type=\"Sample Data 2\")%&gt;%\n         mutate(quantile = factor(quantile,levels = paste0(\"q\",c(5,10,25,50,75,90,95))))\n       \n     })\n   \n   output$dataPlot2 &lt;- renderPlot({\n     data.frame(x=c(vals2$x1, vals2$x2),\n                dt = rep(c(\"Sample 1\",\"Sample 2\"), each = 10000))%&gt;%\n       ggplot(aes(x=x,group = dt))+\n       geom_histogram(aes(y = ..density..),\n                      fill=\"grey\",color = \"black\")+\n       theme_bw()+\n       facet_wrap(.~dt, nrow = 2)+\n       labs(title=\"Sample Data\")\n   })\n   \n   \n   \n   output$quantPlot2 &lt;- renderPlot({\n     plotmin = min(c(mean(vals2$x1)-4*sd(vals2$x1),mean(vals2$x2)-4*sd(vals2$x2)) )\n     plotmx = max(c(mean(vals2$x1)+4*sd(vals2$x1),mean(vals2$x2)+4*sd(vals2$x2)) )\n     p1=vals2$quants1%&gt;%\n       ggplot()+\n       geom_density(data = data.frame(x=vals2$x1),aes(x=x))+\n       theme_bw()+\n       labs(title = \"Smoothed Sample 1 with Quantiles\")+\n       geom_vline(aes(xintercept=qx,color = quantile),size=.4)+\n       theme(legend.position = \"none\")+xlim(plotmin, plotmx)\n     \n     p2=vals2$quants2%&gt;%\n       ggplot()+\n       geom_density(data = data.frame(x=vals2$x2),aes(x=x))+\n       theme_bw()+\n       labs(title = \"Smoothed Sample 2 with Quantiles\")+\n       geom_vline(aes(xintercept=qx,color = quantile),size=.4)+\n       theme(legend.position = \"none\")+xlim(plotmin, plotmx)\n     \n     gridExtra::grid.arrange(p1,p2,nrow=2)\n   })\n   \n   \n   \n   output$qqPlot2 &lt;- renderPlot({\n     plotmin = min(quantile(vals2$x1,.001),quantile(vals2$x2,.001) )\n     plotmx = max(quantile(vals2$x1,.999),quantile(vals2$x2,.999) )\n     data.frame(x=vals2$x1, y = vals2$x2)%&gt;%\n       ggplot()+\n       geom_point(aes(x=sort(x),y=sort(y)))+\n       geom_abline(slope = 1, intercept = 0)+\n       geom_point(data = left_join(vals2$quants1%&gt;%rename(x=qx),vals2$quants2%&gt;%rename(y=qx),\n                                   by=\"quantile\")%&gt;%\n                    mutate(quantile = factor(quantile,levels = paste0(\"q\",c(5,10,25,50,75,90,95)))),\n                  aes(x=x,y=y,color = quantile),size=2)+\n       theme_bw()+\n       labs(x = \"Sample 1\", y = \"Sample 2\")+\n       theme(legend.position = \"bottom\",legend.title = element_blank())+\n       xlim(plotmin,plotmx)+ylim(plotmin,plotmx)\n    \n     \n     \n   })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "index.html#shiny-apps",
    "href": "index.html#shiny-apps",
    "title": "Intro Biostatistics Resources",
    "section": "Shiny Apps",
    "text": "Shiny Apps\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nLeast Squares Regression Visualization\n\n\nHaley Grant\n\n\n\n\nLogistic Function Visualization\n\n\nHaley Grant\n\n\n\n\nQQ Plot Visualization Tool\n\n\nHaley Grant\n\n\n\n\nSampling Distributions and Bootstrapping\n\n\nHaley Grant\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#r-tutorials",
    "href": "index.html#r-tutorials",
    "title": "Intro Biostatistics Resources",
    "section": "",
    "text": "software\n\n\ncode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/SamplingDistShiny/SampDist_shiny.html",
    "href": "posts/SamplingDistShiny/SampDist_shiny.html",
    "title": "Sampling Distributions and Bootstrapping",
    "section": "",
    "text": "#| standalone: true\n#| viewerHeight: 600\n#\n\nlibrary(shiny)\nlibrary(tidyverse)\n\n# Define UI for application that draws a histogram\nui &lt;- fluidPage(\n  \n  tags$style(type=\"text/css\",\n             \".shiny-output-error { visibility: hidden; }\",\n             \".shiny-output-error:before { visibility: hidden; }\"\n  ),\n    # Application title\n    titlePanel(\"Sampling Distributions and Bootstrapping\"),\n\n    # Sidebar with a slider input for number of bins \n    sidebarLayout(\n        sidebarPanel(\n            sliderInput(\"n\",\n                        \"Sample Size:\",\n                        min = 5,\n                        max = 200,\n                        value = 15),\n            selectInput(\"shape\", \n                        label = \"Shape of Original Variable\", \n                        choices = list(\"Normal\", \"Skewed\"),\n                        selected = \"Normal\"),\n            selectInput(\"stat\", \n                        label = \"Statistic of Interest\", \n                        choices = list(\"Mean\", \"Median\",\"75th Percentile\"),\n                        selected = \"Mean\"),\n            selectInput(\"sig.level\",\n                        label = \"Significance Level\",\n                        choices = c(0.01, 0.05, 0.10),\n                        selected = 0.05),\n            actionButton(\"resamp\",\n                          \"Sample from Population\"),\n            actionButton(\"reset\",\n                         \"Reset\")\n        ),\n\n        # Show a plot of the generated distribution\n        mainPanel(\n          textOutput(\"popstats\"), \n          fluidRow(\n            splitLayout(cellWidths = c(\"50%\", \"50%\"), \n                        plotOutput(\"popPlot\",height = \"200px\"), \n                        plotOutput(\"sampPlot\", height = \"200px\")\n          )),\n          plotOutput(\"bootsamps3\",height = \"200px\"),\n          fluidRow(\n            splitLayout(cellWidths = c(\"50%\", \"50%\"), \n                        plotOutput(\"bootstatdist\",height = \"200px\"),\n                        plotOutput(\"iterplot\",height = \"200px\")))\n          \n        )\n    )\n)\n\n# Define server logic required to draw a histogram\nserver &lt;- function(input, output) {\n  \n  vals&lt;-reactiveValues(x = NULL, bootsamps = NULL,popstat = NULL,\n                       bootci = NULL, iters = data.frame(), i = 0)\n  \n  observeEvent({input$shape\n    input$stat\n    input$sig.level\n    input$n\n    input$resamp},{\n  \n  if(input$shape==\"Normal\"){vals$x = rnorm(input$n, mean = 10, sd = 3) \n  if(input$stat == \"Mean\"){vals$popstat = 10\n  } else if(input$stat == \"Median\"){vals$popstat = 10\n  } else if (input$stat == \"75th Percentile\"){vals$popstat = qnorm(0.75,mean = 10, sd = 3 ) }\n  \n  } else{vals$x = rexp(input$n, rate = 0.1) \n  if(input$stat == \"Mean\"){vals$popstat = 1/.1\n  } else if(input$stat == \"Median\"){vals$popstat = qexp(0.5, rate = 0.1)\n  } else if (input$stat == \"75th Percentile\"){vals$popstat = qexp(0.75,rate = 0.1 ) }\n  }\n      \n  vals$bootsamps &lt;- lapply(1:10000, function(i) \n      data.frame(iter=i, s=sample(vals$x, length(vals$x), replace = T)))%&gt;%\n    plyr::ldply() %&gt;%\n    group_by(iter) %&gt;%\n    mutate(stat = ifelse(input$stat==\"Mean\", mean(s),\n                         ifelse(input$stat==\"Median\", median(s),\n                                quantile(s,.75))))\n  \n  vals$bootci &lt;- list(lower = quantile(vals$bootsamps$stat[seq(1,input$n*10000, by = input$n )],as.numeric(input$sig.level)/2)%&gt;%round(4),\n                 upper = quantile(vals$bootsamps$stat[seq(1,input$n*10000, by = input$n )],1-as.numeric(input$sig.level)/2)%&gt;%round(4))\n  \n  vals$i = vals$i+1\n  vals$iters = bind_rows(vals$iters,\n    data.frame(x=vals$x)%&gt;%\n    summarise(stat = ifelse(input$stat==\"Mean\", mean(x),\n                         ifelse(input$stat==\"Median\", median(x),\n                                      quantile(x,.75)))) %&gt;%\n    mutate(upper = vals$bootci$upper, lower =vals$bootci$lower, \n           iter = vals$i))\n  \n  })\n\n  observeEvent({input$reset}, {\n\n    vals$iters=data.frame()\n    vals$i = 0\n    vals$bootsamps = NULL\n    vals$x = NULL\n\n    })\n  \n  \n  output$popstats &lt;- renderText({\n    paste0(input$stat, \" in population: \", vals$popstat)\n  })\n  output$popPlot &lt;- renderPlot({\n    if(input$shape==\"Normal\"){\n    data.frame(x=0:20) %&gt;%\n      ggplot(aes(x = x)) + \n      stat_function(fun = dnorm, args = list(mean = 10, sd = 3) ) +\n      theme_bw() +\n      labs(x = \"Variable X\", title = \"Population Distribution\")\n    } else {\n      data.frame(x=0:50) %&gt;%\n        ggplot(aes(x = x)) + \n        stat_function(fun = dexp, args = list(rate=.1) ) +\n        theme_bw() +\n        labs(x = \"Variable X\", title = \"Population Distribution\")\n    }\n    \n  })\n    output$sampPlot &lt;- renderPlot({\n      data.frame(x = vals$x) %&gt;%\n        ggplot(aes(x = x)) + \n        geom_histogram(bins = min(round(input$n/2),30),\n                       color = \"black\", fill = \"skyblue\") + \n        theme_bw()+\n        labs(x = \"Variable X\", title = \"Sample\")\n    })\n    \n    output$bootsamps3 &lt;- renderPlot({\n      vals$bootsamps%&gt;%\n        filter(iter&lt;=3)%&gt;%\n        mutate(iter = paste0(\"Boostrap Sample \",iter))%&gt;%\n      ggplot(aes(x=s)) + \n        geom_histogram(bins = min(round(input$n/2),30),\n                       color = \"black\", fill = \"skyblue4\") + \n        theme_bw() +\n        facet_wrap(.~iter, nrow = 1) + \n        geom_vline(aes(xintercept = stat), color = \"firebrick1\") + \n        labs(x = \"Variable X\", title = \"Example Bootstrap Samples\")\n    })\n    \n    output$bootstatdist &lt;- renderPlot({\n     vals$bootsamps %&gt;%\n        group_by(iter)%&gt;%\n        summarise(stat = first(stat))%&gt;%\n        ggplot(aes(x=stat)) + \n        geom_histogram(bins = min(round(input$n/2),30),\n                       color = \"black\", fill = \"firebrick1\") + \n        theme_bw() +\n        geom_vline(xintercept = unlist(vals$bootci), linetype = 2) + \n        labs(x = paste0(\"Bootstrap\", input$stat), title = \"Bootstrap Sampling Distribution\",\n             subtitle = input$stat)\n    })\n    \n \n    output$bootci = renderText(\n      paste0(\"Bootstrap CI: (\",vals$bootci$lower, \", \", \n             vals$bootci$upper,\")\" ))\n    \n    output$iterplot = renderPlot({\n      vals$iters %&gt;%\n        mutate(covers = case_when(\n          upper&gt;=vals$popstat & lower &lt;= vals$popstat ~ \"Covers True Parameter\",\n          upper&lt;vals$popstat | lower &gt; vals$popstat~\"Does Not Cover Parameter\"))%&gt;%\n        bind_rows(data.frame(covers = \"Covers True Parameter\", lower = NA, upper = NA, stat = NA))%&gt;%\n        ggplot(aes(x = stat, y = iter, color = covers))+\n        geom_point()+\n        theme_bw()+\n        scale_color_manual(values = c( \"#00BFC4\",\"#F8766D\")) + \n        geom_errorbarh(aes(xmin = lower, xmax = upper))+\n        geom_vline(xintercept = vals$popstat) + \n        labs(x = \"Bootstrap CI\", y = \"Iteration\",color = element_blank())\n    })\n\n  \n}\n\n# Run the application \nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "posts/LeastSquaresShiny/LeastSquares_shiny.html",
    "href": "posts/LeastSquaresShiny/LeastSquares_shiny.html",
    "title": "Least Squares Regression Visualization",
    "section": "",
    "text": "#| standalone: true\n#| viewerHeight: 700\n\nlibrary(shiny)\nlibrary(tidyverse)\n\n\n\n# Define UI for application that draws a histogram\nui &lt;- fluidPage(\n\n    # Application title\n    titlePanel(\"Least Squares Regression\"),\n\n    tabsetPanel(\n      tabPanel(\"Slope and Intercept\", fluid = TRUE,\n    # Sidebar with a slider input for number of bins \n    sidebarLayout(\n        sidebarPanel(\n          sliderInput(\"realslope\",\n                      \"True Slope\",\n                      min = -2,\n                      max = 2,\n                      value = 0, step = .01),\n          sliderInput(\"realintercept\",\n                      \"True Intercept\",\n                      min = -10,\n                      max = 10,\n                      value = 0,step = .01),\n            sliderInput(\"slope\",\n                        \"Slope\",\n                        min = -2,\n                        max = 2,\n                        value = 0, step = .01),\n            sliderInput(\"intercept\",\n                        \"Intercept\",\n                        min = -10,\n                        max = 10,\n                        value = 0,step = .01)\n            \n        ),\n\n        # Show a plot of the generated distribution\n        mainPanel(\n          plotOutput(\"regplot\"),\n          plotOutput(\"seplot\")\n        ))\n    ), tabPanel(\"Slope through means\", fluid = TRUE,\n                # Sidebar with a slider input for number of bins \n                sidebarLayout(\n                  sidebarPanel(\n                    sliderInput(\"realslope2\",\n                                \"True Slope\",\n                                min = -2,\n                                max = 2,\n                                value = 0, step = .01),\n                    sliderInput(\"realintercept2\",\n                                \"True Intercept\",\n                                min = -10,\n                                max = 10,\n                                value = 0,step = .01),\n                    sliderInput(\"slope2\",\n                                \"Slope\",\n                                min = -2,\n                                max = 2,\n                                value = 0, step = .01),\n),\n                \n                # Show a plot of the generated distribution\n                mainPanel(\n                  plotOutput(\"regplot2\"),\n                  plotOutput(\"seplot2\")\n                ))\n    )\n)\n)\n\n\n\n# Define server logic required to draw a histogram\nserver &lt;- function(input, output) {\n\n   vals&lt;-reactiveValues(df = NULL, se = NULL, x=NULL, y = NULL)\n   vals2 &lt;-reactiveValues(df = NULL, se = NULL, x=NULL, y = NULL)\n  observeEvent({ input$slope\n     input$intercept\n     input$realslope\n     input$realintercept},\n     {  x = runif(50, min = 18, max = 40)\n     y = input$realintercept + input$realslope*x + rnorm(50, sd = 2)\n       vals$df = data.frame(x=x, y=y)%&gt;% \n       mutate(s = input$slope,\n          i = input$intercept)%&gt;%\n       mutate(estimated = i + s*x)%&gt;%\n       mutate(error = y-estimated)\n     vals$se = sum(vals$df$error^2)/nrow(vals$df)\n     })\n   \n  observeEvent({ input$slope2\n    input$realslope2\n    input$realintercept2},\n    {  x = runif(50, min = 18, max = 40)\n    y = input$realintercept2 + input$realslope2*x + rnorm(50, sd = 2)\n    vals2$df = data.frame(x=x, y=y)%&gt;% \n      mutate(s = input$slope2,\n             i = mean(y) - mean(x)*input$slope2)%&gt;%\n      mutate(estimated = i + s*x)%&gt;%\n      mutate(error = y-estimated)\n    vals2$se = sum(vals2$df$error^2)/nrow(vals2$df)\n    })\n  \n  \n   \n   output$regplot &lt;- renderPlot({\n     vals$df %&gt;%\n       ggplot(aes(x = x, y=y)) + \n       geom_point() +\n       geom_point(aes(y = estimated), color = \"skyblue\", alpha = 0.5) +\n       geom_abline(aes(intercept = i, slope = s), color = \"skyblue\")  +\n     geom_errorbar(aes(ymin = y, ymax = estimated), color = \"skyblue\", linetype=2) + \n     theme_bw()\n     })\n   \n   output$seplot &lt;- renderPlot({\n     vals$df %&gt;%\n       ggplot(aes(x = x, y=y)) + \n       geom_point() +\n       geom_point(aes(y = estimated), color = \"skyblue\", alpha = 0.5) +\n       geom_abline(aes(intercept = i, slope = s), color = \"skyblue\")  +\n       geom_rect(aes(ymin = y, ymax = estimated, xmin = x, xmax = x-error), \n                 fill = \"firebrick1\", alpha = 0.1, color = \"firebrick1\") + \n       theme_bw() + \n       labs(title = paste0(\"Mean Squared Error: \", vals$se)) \n\n   })\n   \n   output$regplot2 &lt;- renderPlot({\n     vals2$df %&gt;%\n       ggplot(aes(x = x, y=y)) + \n       geom_point() +\n       geom_point(aes(y = estimated), color = \"skyblue\", alpha = 0.5) +\n       geom_abline(aes(intercept = i, slope = s), color = \"skyblue\")  +\n       geom_errorbar(aes(ymin = y, ymax = estimated), color = \"skyblue\", linetype=2) + \n       theme_bw() + \n       geom_point(shape = 18, color = \"red\", aes(x=mean(x), y = mean(y)), size = 4) \n   })\n   \n   output$seplot2 &lt;- renderPlot({\n     vals2$df %&gt;%\n       ggplot(aes(x = x, y=y)) + \n       geom_point() +\n       geom_point(aes(y = estimated), color = \"skyblue\", alpha = 0.5) +\n       geom_abline(aes(intercept = i, slope = s), color = \"skyblue\")  +\n       geom_rect(aes(ymin = y, ymax = estimated, xmin = x, xmax = x-error), \n                 fill = \"firebrick1\", alpha = 0.1, color = \"firebrick1\") + \n       theme_bw() + \n       labs(title = paste0(\"Mean Squared Error: \", vals2$se))  + \n       geom_point(shape = 18, color = \"red\", aes(x=mean(x), y = mean(y)), size = 4)\n     \n   })\n\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "posts/LogisticShiny/Logistic_shiny.html",
    "href": "posts/LogisticShiny/Logistic_shiny.html",
    "title": "Logistic Function Visualization",
    "section": "",
    "text": "#| standalone: true\n#| viewerHeight: 600\n\n# Load necessary libraries\nlibrary(shiny)\nlibrary(ggplot2)\n\n# Define UI for application\nui &lt;- fluidPage(\n  titlePanel(\"Logistic Function Visualization\"),\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\"beta\", \"Beta Coefficient\", min = -5, max = 5, value = 1, step = 0.1),\n      sliderInput(\"intercept\", \"Intercept (Log Odds at x=0)\", min = -5, max = 5, value = 0, step = 0.1)\n    ),\n    mainPanel(\n      plotOutput(\"log_odds_plot\"),\n      plotOutput(\"probability_plot\")\n    )\n  )\n)\n\n# Define server logic\nserver &lt;- function(input, output) {\n  # Calculate logistic function\n  logistic_function &lt;- function(x, beta, intercept) {\n    return(1 / (1 + exp(-(intercept + beta * x))))\n  }\n  \n  # Generate x values\n  x_values &lt;- seq(-10, 10, length.out = 100)\n  \n  # Create log odds plot\n  output$log_odds_plot &lt;- renderPlot({\n    log_odds &lt;- input$intercept + input$beta * x_values\n    \n    ggplot() +\n      geom_line(aes(x = x_values, y = log_odds), color = \"blue\") +\n      labs(title = \"Log Odds Plot\", x = \"X\", y = \"Log Odds\") + theme_bw()\n  })\n  \n  # Create probability plot\n  output$probability_plot &lt;- renderPlot({\n    probabilities &lt;- logistic_function(x_values, input$beta, input$intercept)\n    \n    ggplot() +\n      geom_line(aes(x = x_values, y = probabilities), color = \"red\") +\n      labs(title = \"Probability Plot\", x = \"X\", y = \"Probability\") + \n      theme_bw()\n  })\n}\n\n# Run the application\nshinyApp(ui = ui, server = server)"
  }
]